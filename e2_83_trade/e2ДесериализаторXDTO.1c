Перем ОСобыеСущности;
Перем Контекст;

//---------------------------------------------------------------------------------------------

Процедура УстановитьКонтекст(_Контекст)
	Контекст = _Контекст;
КонецПроцедуры

Процедура ИнициализироватьИтераторЗапросыСсылки(Запрос, Итератор) Экспорт
	УстановитьКонтекст(Запрос.context);
	Итератор.list = Запрос.reference;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторЗапросыСущности(Запрос, Итератор) Экспорт
	УстановитьКонтекст(Запрос.context);
	Итератор.list = Запрос.entity;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторФильтры(ЭлЗапросСущности, Итератор) Экспорт
	Итератор.list = ЭлЗапросСущности.dto.filter;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторСущности(Сообщение, Итератор) Экспорт
	УстановитьКонтекст(Сообщение);
	Итератор.list = Сообщение.entity;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторСостояния(Сообщение, Итератор) Экспорт
	УстановитьКонтекст(Сообщение);
	Итератор.list = Сообщение.state;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторЭлементы(ЭлСущность, Итератор) Экспорт
	Итератор.list = ЭлСущность.dto.element;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторЭлементыИзмененные(ЭлСущность, Итератор) Экспорт
	Итератор.list = ЭлСущность.dto.ПолучитьСписок("element[changed=true]");
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторРеквизиты(ЭлЭлемент, Итератор) Экспорт
	Итератор.list = ЭлЭлемент.dto.attribute;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторТабличныеЧасти(ЭлЭлемент, Итератор) Экспорт
	Итератор.list = ЭлЭлемент.dto.table;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры

Процедура ИнициализироватьИтераторСтроки(ЭлТабличнаяЧасть, Итератор) Экспорт
	Итератор.list = ЭлТабличнаяЧасть.dto.row;
	Итератор.size = Итератор.list.Количество();
КонецПроцедуры


Процедура УстановитьИтератор(Итератор) Экспорт
	Итератор.Элемент = Новый Структура("dto");
	Итератор.Элемент.dto = Итератор.list[Итератор.index];

	Если Итератор.ВидИтератора = "ЗапросыСсылки" Тогда
		УстановитьЭлемент_Ссылка(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "ЗапросыСущности" Тогда
		УстановитьЭлемент_ЗапросСущности(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "Фильтры" Тогда
		УстановитьЭлемент_Фильтр(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "Сущности" Тогда
		УстановитьЭлемент_Сущность(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "Состояния" Тогда
		УстановитьЭлемент_Состояние(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "Элементы" Тогда
		УстановитьЭлемент_Элемент(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "Реквизиты" Тогда
		УстановитьЭлемент_Реквизит(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "ТабличныеЧасти" Тогда
		УстановитьЭлемент_ТабличнаяЧасть(Итератор.Элемент);
	ИначеЕсли Итератор.ВидИтератора = "Строки" Тогда
		УстановитьЭлемент_Строка(Итератор.Элемент);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьЭлемент_ЗапросСущности(Элемент)
	Элемент.Вставить("ИмяСущности", Элемент.dto.entityName);
КонецПроцедуры

Процедура УстановитьЭлемент_Фильтр(Элемент)
	Элемент.Вставить("ИмяРеквизита", Элемент.dto.attributeName);
	Элемент.Вставить("Сравнение",    Элемент.dto.condition);
КонецПроцедуры

//---------------------------------------------------------------------------------------------

Процедура УстановитьЭлемент_Сущность(Элемент)
	Элемент.Вставить("ИмяСущности", Элемент.dto.entityName);
КонецПроцедуры

Процедура УстановитьЭлемент_Состояние(Элемент)
	Элемент.Вставить("ИмяСостояния", Элемент.dto.stateName);
КонецПроцедуры

Процедура УстановитьЭлемент_Элемент(Элемент)
	Элемент.Вставить("УидЭлемента", Элемент.dto.elementUid);
	Элемент.Вставить("Изменен",     Элемент.dto.changed);
	Элемент.Вставить("Удален",      Элемент.dto.deleted);
	Элемент.Вставить("Синт",        Элемент.dto.synth);
	Элемент.Вставить("Флаг",        Элемент.dto.use);
КонецПроцедуры

Процедура УстановитьЭлемент_Реквизит(Элемент)
	Элемент.Вставить("ИмяРеквизита", Элемент.dto.attributeName);
	Элемент.Вставить("Флаг",         Элемент.dto.use);
КонецПроцедуры

Процедура УстановитьЭлемент_ТабличнаяЧасть(Элемент)
	Элемент.Вставить("ИмяТабличнойЧасти", Элемент.dto.tableName);
	Элемент.Вставить("Флаг",              Элемент.dto.use);
КонецПроцедуры

Процедура УстановитьЭлемент_Строка(Элемент)
	Элемент.Вставить("Удален", Элемент.dto.deleted);
КонецПроцедуры

Процедура УстановитьЭлемент_Ссылка(Элемент)
	Элемент.Вставить("ТипСущности", ОСобыеСущности.ТипСущности(Элемент.dto.entityName));
	Элемент.Вставить("УидЭлемента", Элемент.dto.elementUid);
КонецПроцедуры

//---------------------------------------------------------------------------------------------

Функция РеквизитЗначение(ЭлРеквизит) Экспорт
	Возврат ?(ЭлРеквизит <> Неопределено, ЭлРеквизит.dto.value, Неопределено);
КонецФункции

Функция РеквизитСсылка(ЭлРеквизит) Экспорт
	Если ЭлРеквизит <> Неопределено Тогда
		Ссылка = Новый Структура("dto", ЭлРеквизит.dto.reference);
		УстановитьЭлемент_Ссылка(Ссылка);
		Возврат Ссылка;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции


Функция ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита) Экспорт
	attribute = ЭлЭлемент.dto.Получить("attribute[attributeName='" + ИмяРеквизита + "']");
	Если attribute <> Неопределено Тогда
		ЭлРеквизит = Новый Структура("dto", attribute);
		УстановитьЭлемент_Реквизит(ЭлРеквизит);
		Возврат ЭлРеквизит;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

Функция ПолучитьЭлементПоСсылке(ЭлЗначениеСсылка) Экспорт
	Если ЭлЗначениеСсылка <> Неопределено И Контекст <> Неопределено Тогда
		Элемент = Новый Структура("dto");
		Элемент.dto = Контекст.Получить("entity[entityName='" + ЭлЗначениеСсылка.ТипСущности.ИмяСущности + "']/element[elementUid='" + ЭлЗначениеСсылка.УидЭлемента + "']");
		УстановитьЭлемент_Элемент(Элемент);

		Возврат Элемент;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

//---------------------------------------------------------------------------------------------

Функция Инициализировать(_ОсобыеСущности) Экспорт
	ОсобыеСущности = _ОсобыеСущности;
	Возврат ЭтотОбъект;
КонецФункции