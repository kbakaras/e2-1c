Перем Десериализатор;
Перем ОсобыеСущности;

Перем РежимXML;
Перем РежимXDTO;

Перем КэшЭлементов;
Перем АнтикэшМетодов;

//---------------------------------------------------------------------------------------------

Функция СоздатьИтератор(ВидИтератора)
	Итератор = Новый Структура("ВидИтератора, Элемент, list, index, size");
	Итератор.ВидИтератора = ВидИтератора;
	Итератор.index        = -1;

	Возврат Итератор;
КонецФункции


Функция ИтераторСистемы(Результат) Экспорт
	Итератор = СоздатьИтератор("Системы");
	Десериализатор.ИнициализироватьИтераторСистемы(Результат, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторСущности(Контекст) Экспорт
	Итератор = СоздатьИтератор("Сущности");
	Десериализатор.ИнициализироватьИтераторСущности(Контекст, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторЭлементы(ЭлСущность) Экспорт
	Итератор = СоздатьИтератор("Элементы");
	Десериализатор.ИнициализироватьИтераторЭлементы(ЭлСущность, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторЭлементыИзмененные(ЭлСущность) Экспорт
	Итератор = СоздатьИтератор("Элементы");
	Десериализатор.ИнициализироватьИтераторЭлементыИзмененные(ЭлСущность, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторРеквизиты(ЭлЭлемент) Экспорт
	Итератор = СоздатьИтератор("Реквизиты");
	Десериализатор.ИнициализироватьИтераторРеквизиты(ЭлЭлемент, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторТабличныеЧасти(ЭлЭлемент) Экспорт
	Итератор = СоздатьИтератор("ТабличныеЧасти");
	Десериализатор.ИнициализироватьИтераторТабличныеЧасти(ЭлЭлемент, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторСтроки(ЭлТабличнаяЧасть) Экспорт
	Итератор = СоздатьИтератор("Строки");
	Десериализатор.ИнициализироватьИтераторСтроки(ЭлТабличнаяЧасть, Итератор);
	Возврат Итератор;
КонецФункции


Функция ИтераторЗапросыСсылки(Запрос) Экспорт
	Итератор = СоздатьИтератор("ЗапросыСсылки");
	Десериализатор.ИнициализироватьИтераторЗапросыСсылки(Запрос, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторЗапросыСущности(Запрос) Экспорт
	Итератор = СоздатьИтератор("ЗапросыСущности");
	Десериализатор.ИнициализироватьИтераторЗапросыСущности(Запрос, Итератор);
	Возврат Итератор;
КонецФункции

Функция ИтераторФильтры(ЭлЗапросСущности)
	Итератор = СоздатьИтератор("Фильтры");
	Десериализатор.ИнициализироватьИтераторФильтры(ЭлЗапросСущности, Итератор);
	Возврат Итератор;
КонецФункции


Функция ИтераторСледующий(Итератор) Экспорт
	Если Итератор.index + 1 < Итератор.size Тогда
		Итератор.index = Итератор.index + 1;
		Десериализатор.УстановитьИтератор(Итератор);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//---------------------------------------------------------------------------------------------

Функция ПолучитьСущность(ЭлСистема, ИмяСущности) Экспорт
	Возврат Десериализатор.ПолучитьСущность(ЭлСистема, ИмяСущности);
КонецФункции

//---------------------------------------------------------------------------------------------

// Если в сообщении-запросе есть контекст, будет произведена попытка найти dto-элемент по dto-ссылке (ЭлЗначениеСсылка).
// Если dto-элемент найден, будет произведена попытка вызвать специализированный метод поиска ссылки БД по
// dto-элементу.
// Если ничего найти не удалось, будет предпринята попытка вызвать специализированный метод получения ссылки БД по UID элемента.
// Если специализированный метод не существут, будет попытка получить ссылку БД по UID напрямую.
Функция НайтиПолучить(ЭлЗначениеСсылка) Экспорт
	Тип = ЭлЗначениеСсылка.ТипСущности.Тип;
	Вид = ЭлЗначениеСсылка.ТипСущности.Вид;

	Элемент = Десериализатор.ПолучитьЭлементПоСсылке(ЭлЗначениеСсылка);
	Если Элемент <> Неопределено Тогда
		ИмяМетода = "НайтиСсылку_" + Тип + "_" + Вид;
		Если АнтикэшМетодов.Получить(ИмяМетода) = Неопределено Тогда
			Попытка
				Возврат Вычислить("ОсобыеСущности." + ИмяМетода + "(Элемент)");

			Исключение
				Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
					АнтикэшМетодов.Вставить(ИмяМетода, Истина);
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	ИмяМетода = "ПолучитьСсылку_" + Тип + "_" + Вид;
	Если АнтикэшМетодов.Получить(ИмяМетода) = Неопределено Тогда
		Попытка
			Возврат Вычислить("ОсобыеСущности." + ИмяМетода + "(ЭлЗначениеСсылка.УидЭлемента)");

		Исключение
			Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
				АнтикэшМетодов.Вставить(ИмяМетода, Истина);
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;

	Если Тип = "Справочники" Тогда
		Ссылка = Справочники[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЗначениеСсылка.УидЭлемента));
		Возврат ?(Ссылка.ПолучитьОбъект() = Неопределено, Неопределено, Ссылка);
	ИначеЕсли Тип = "Документы" Тогда
		Ссылка = Документы[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЗначениеСсылка.УидЭлемента));
		Возврат ?(Ссылка.ПолучитьОбъект() = Неопределено, Неопределено, Ссылка);
	Иначе
		ВызватьИсключение СтрОшПоискНеПоддерживается(Тип, Вид);
	КонецЕсли;
КонецФункции


Функция НайтиЭлементы(ЭлЗапросСущности) Экспорт
	ТипСущности = ОсобыеСущности.ТипСущности(ЭлЗапросСущности.ИмяСущности);
	Фильтры = ИтераторФильтры(ЭлЗапросСущности);
	
	Если ТипСущности.Тип = "Справочники" Тогда
		Если Фильтры.size = 0 Тогда
			Возврат ВсеЭлементы_Справочники(ТипСущности.Вид);
		Иначе
			Возврат НайтиЭлементы_Справочники(ТипСущности.Вид, Фильтры);
		КонецЕсли;
		
	ИначеЕсли ТипСущности.Тип = "Документы" Тогда
		Если Фильтры.size = 0 Тогда
			Возврат ВсеЭлементы_Документы(ТипСущности.Вид);
		Иначе
			Возврат НайтиЭлементы_Документы(ТипСущности.Вид, Фильтры);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение СтрОшПоискНеПоддерживается(ТипСущности.Тип, ТипСущности.Вид);
	КонецЕсли;
КонецФункции


Функция НайтиЭлементы_Справочники(Вид, ИтФильтры)
	Мета = Метаданные.Справочники[Вид];
	
	Запрос = Новый Запрос();
	Условие = "";
	
	Пока ИтераторСледующий(ИтФильтры) Цикл
		ЭлФильтр = ИтФильтры.Элемент;
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", Условие);

		ИмяРеквизита = ЭлФильтр.ИмяРеквизита;
		Значение = Неопределено;

		МетаРек = Мета.Реквизиты.Найти(ИмяРеквизита);
		Если МетаРек <> Неопределено Тогда
			Если МетаРек.Тип.СодержитТип(Тип("Строка")) Тогда
				Значение = ЗначениеСтрока(ЭлФильтр);
			ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Число")) Тогда
				Значение = ЗначениеЧисло(ЭлФильтр);
			ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Булево")) Тогда
				Значение = ЗначениеБулево(ЭлФильтр);
			ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Дата")) Тогда
				Значение = ЗначениеДата(ЭлФильтр);
			Иначе
				ПервыйТип = МетаРек.Тип.Типы()[0];
				Если Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
					Значение = ЗначениеПеречисление(ЭлФильтр);
				ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
					Значение = НайтиПолучить(ЗначениеСсылка(ЭлФильтр));
					Если Значение = Неопределено Тогда
						ВызватьИсключение СтрОшНеНайденЭлементДляФильтрации(ЗначениеСсылка(ЭлФильтр));
					КонецЕсли;
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
					Значение = НайтиПолучить(ЗначениеСсылка(ЭлФильтр));
					Если Значение = Неопределено Тогда
						ВызватьИсключение СтрОшНеНайденЭлементДляФильтрации(ЗначениеСсылка(ЭлФильтр));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяРеквизита = "Код" Тогда
			Если Мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				Значение = ЗначениеСтрока(ЭлФильтр);
			Иначе
				Значение = ЗначениеЧисло(ЭлФильтр);
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "Наименование" Тогда
			Значение = ЗначениеСтрока(ЭлФильтр);
		ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
			Значение = ЗначениеБулево(ЭлФильтр);
		ИначеЕсли ИмяРеквизита = "Владелец" Тогда
			Значение = НайтиПолучить(ЗначениеСсылка(ЭлФильтр));
		ИначеЕсли ИмяРеквизита = "Родитель" Тогда
			Значение = НайтиПолучить(ЗначениеСсылка(ЭлФильтр));
		ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
			Значение = ЗначениеБулево(ЭлФильтр);
		Иначе
			ВызватьИсключение "Не найден реквизит для фильтрации [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!";
		КонецЕсли;

		Если ЭлФильтр.Сравнение = "equal" Тогда
			Условие = Условие + "(" + ИмяРеквизита + " = &" + ИмяРеквизита + ")";
		ИначеЕсли ЭлФильтр.Сравнение = "like" Тогда
			Условие = Условие + "(" + ИмяРеквизита + " ПОДОБНО &" + ИмяРеквизита + ")";
		Иначе
			ВызватьИсключение СтрОшУсловиеНеПоддерживается(ЭлФильтр.Сравнение);
		КонецЕсли;

		Запрос.УстановитьПараметр(ИмяРеквизита, Значение);
	КонецЦикла;

	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник." + Вид + " ГДЕ " + Условие;
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция НайтиЭлементы_Документы(Вид, ИтФильтры)
	Мета = Метаданные.Документы[Вид];
	
	Запрос = Новый Запрос();
	Условие = "";
	
	Пока ИтераторСледующий(ИтФильтры) Цикл
		ЭлФильтр = ИтФильтры.Элемент;
		Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", Условие);

		ИмяРеквизита = ЭлФильтр.ИмяРеквизита;
		Значение = Неопределено;

		МетаРек = Мета.Реквизиты.Найти(ИмяРеквизита);
		Если МетаРек <> Неопределено Тогда
			Если МетаРек.Тип.СодержитТип(Тип("Строка")) Тогда
				Значение = ЗначениеСтрока(ЭлФильтр);
			ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Число")) Тогда
				Значение = ЗначениеЧисло(ЭлФильтр);
			ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Булево")) Тогда
				Значение = ЗначениеБулево(ЭлФильтр);
			ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Дата")) Тогда
				Значение = ЗначениеДата(ЭлФильтр);
			Иначе
				ПервыйТип = МетаРек.Тип.Типы()[0];
				Если Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
					Значение = ЗначениеПеречисление(ЭлФильтр);
				ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
					Значение = НайтиПолучить(ЗначениеСсылка(ЭлФильтр));
					Если Значение = Неопределено Тогда
						ВызватьИсключение СтрОшНеНайденЭлементДляФильтрации(ЗначениеСсылка(ЭлФильтр));
					КонецЕсли;
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
					Значение = НайтиПолучить(ЗначениеСсылка(ЭлФильтр));
					Если Значение = Неопределено Тогда
						ВызватьИсключение СтрОшНеНайденЭлементДляФильтрации(ЗначениеСсылка(ЭлФильтр));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяРеквизита = "Номер" Тогда
			Если Мета.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
				Значение = ЗначениеСтрока(ЭлФильтр);
			Иначе
				Значение = ЗначениеЧисло(ЭлФильтр);
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "Дата" Тогда
			Значение = ЗначениеСтрока(ЭлФильтр);
		ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
			Значение = ЗначениеБулево(ЭлФильтр);
		ИначеЕсли ИмяРеквизита = "Проведен" Тогда
			Значение = ЗначениеБулево(ЭлФильтр);
		Иначе
			ВызватьИсключение "Не найден реквизит для фильтрации [" + ИмяРеквизита + "] в документе <" + Вид + ">!";
		КонецЕсли;

		Если ЭлФильтр.Сравнение = "equal" Тогда
			Условие = Условие + "(" + ИмяРеквизита + " = &" + ИмяРеквизита + ")";
		ИначеЕсли ЭлФильтр.Сравнение = "like" Тогда
			Условие = Условие + "(" + ИмяРеквизита + " ПОДОБНО &" + ИмяРеквизита + ")";
		Иначе
			ВызватьИсключение СтрОшУсловиеНеПоддерживается(ЭлФильтр.Сравнение);
		КонецЕсли;

		Запрос.УстановитьПараметр(ИмяРеквизита, Значение);
	КонецЦикла;

	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Документ." + Вид + " ГДЕ " + Условие;
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ВсеЭлементы_Справочники(Вид)
	Возврат Справочники[Вид].Выбрать();
КонецФункции

Функция ВсеЭлементы_Документы(Вид)
	Возврат Документы[Вид].Выбрать();
КонецФункции


Функция СтрОшПоискНеПоддерживается(Тип, Вид)
	Возврат "Не поддерживается поиск элементов с типом <" + Тип + "." + Вид + ">!";
КонецФункции

Функция СтрОшУсловиеНеПоддерживается(condition)
	Возврат "Условие <" + condition + "> не поддерживается!";
КонецФункции

Функция СтрОшНеНайденЭлементДляФильтрации(ЭлЗначениеСсылка)
	Возврат "Не найден элемент <" + ЭлЗначениеСсылка.ТипСущности.Тип + "." + ЭлЗначениеСсылка.ТипСущности.Вид + ": " + ЭлЗначениеСсылка.УидЭлемента + "> для условия фильтрации!";
КонецФункции

//---------------------------------------------------------------------------------------------

Функция ПолучитьРеквизитСтрока(ЭлЭлемент, ИмяРеквизита) Экспорт
	Возврат ЗначениеСтрока(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитБулево(ЭлЭлемент, ИмяРеквизита) Экспорт
	Возврат ЗначениеБулево(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитДата(ЭлЭлемент, ИмяРеквизита) Экспорт
	Возврат ЗначениеДата(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитЧисло(ЭлЭлемент, ИмяРеквизита) Экспорт
	Возврат ЗначениеЧисло(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитПеречисление(ЭлЭлемент, ИмяРеквизита) Экспорт
	Возврат ЗначениеПеречисление(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитСсылку(ЭлЭлемент, ИмяРеквизита) Экспорт
	Возврат ЗначениеСсылка(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции


Функция ЗначениеСтрока(ЭлРеквизит)
	Возврат Десериализатор.РеквизитЗначение(ЭлРеквизит);
КонецФункции

Функция ЗначениеБулево(ЭлРеквизит)
	Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
	Возврат ?(Значение = Неопределено, Ложь, Значение = "true");
КонецФункции

Функция ЗначениеДата(ЭлРеквизит)
	Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
	Возврат ?(Значение = Неопределено, Дата(1, 1, 1), XMLЗначение(Тип("Дата"), Значение));
КонецФункции

Функция ЗначениеЧисло(ЭлРеквизит)
	Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
	Возврат ?(Значение = Неопределено, 0, Число(Значение));
КонецФункции

Функция ЗначениеПеречисление(ЭлРеквизит)
	Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
	Если Значение <> Неопределено Тогда
		ИндексТочки = Найти(Значение, ".");
		Значение = Перечисления[Лев(Значение, ИндексТочки - 1)][Сред(Значение, ИндексТочки + 1)];
	КонецЕсли;
	
	Возврат Значение;
КонецФункции

Функция ЗначениеСсылка(ЭлРеквизит)
	Возврат Десериализатор.РеквизитСсылка(ЭлРеквизит);
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура ДесериализоватьИзмененные(Контекст) Экспорт
	ИтСущности = ИтераторСущности(Контекст);
	Пока ИтераторСледующий(ИтСущности) Цикл
		ТипСущности = ОсобыеСущности.ТипСущности(ИтСущности.Элемент.ИмяСущности);
		ИтЭлементы = ИтераторЭлементыИзмененные(ИтСущности.Элемент);
		Пока ИтераторСледующий(ИтЭлементы) Цикл
			Десериализовать(ИтЭлементы.Элемент, ТипСущности.Тип, ТипСущности.Вид);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


Функция Десериализовать(ЭлЭлемент, Тип, Вид) Экспорт
	Стр = НайтиВКэше(Тип + "." + Вид, ЭлЭлемент.УидЭлемента);
	Если Стр = Неопределено Тогда
		Стр = ДобавитьВКэш(Тип + "." + Вид, ЭлЭлемент.УидЭлемента);
		Стр.Ссылка = НайтиПолучитьСоздать(ЭлЭлемент, Тип, Вид);
	КонецЕсли;

	Объект = Стр.Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Если Тип = "Справочники" Тогда
			ЭтоГруппа = ПолучитьРеквизитБулево(ЭлЭлемент, "ЭтоГруппа");
			Объект = ?(ЭтоГруппа, Справочники[Вид].СоздатьГруппу(), Справочники[Вид].СоздатьЭлемент());
		    Объект.УстановитьСсылкуНового(Стр.Ссылка);
		ИначеЕсли Тип = "Документы" Тогда
			Объект = Документы[Вид].СоздатьДокумент();
		    Объект.УстановитьСсылкуНового(Стр.Ссылка);
		КонецЕсли;
	ИначеЕсли ЭлЭлемент.Изменен И Не Стр.Обновлен Тогда
		Объект = Стр.Ссылка.ПолучитьОбъект();
	Иначе
		Объект = Неопределено;
	КонецЕсли;

	Если Объект <> Неопределено Тогда
		Стр.Обновлен = Истина;

		Попытка
			Выполнить("ОсобыеСущности.Десериализовать_" + Тип + "_" + Вид + "(ЭлЭлемент, Объект)");
		Исключение
			Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
				Если Тип = "Справочники" Тогда
					Десериализовать_Справочники(ЭлЭлемент, Вид, Объект);
				ИначеЕсли Тип = "Документы" Тогда
					Десериализовать_Документы(ЭлЭлемент, Вид, Объект);
				КонецЕсли;
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;

		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
		
		Если Тип = "Документы" Тогда
			Объект.ОбменДанными.Загрузка = Ложь;
			Объект.Записать(
					?(ПолучитьРеквизитБулево(ЭлЭлемент, "Проведен"), РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения),
					РежимПроведенияДокумента.Неоперативный);
		КонецЕсли;
	КонецЕсли;

	Возврат Стр.Ссылка;
КонецФункции

// Выполняет попытку найти существующий элемент БД.
// 1. Сначала предпринимается попытка вызвать специализированный метод для поиска по элементу.
// 2. Если специализированного метода для поиска нет, производится попытка вызвать
//    специализированный метод для получения по УИД.
// 3. Если не обнаружено ни одного специализированного метода, либо если какой-то из них
//    был найден, но вернул [Неопределено], создаётся новая ссылка соответствующего
//    типа на основании УИД десериализуемого элемента.
Функция НайтиПолучитьСоздать(ЭлЭлемент, Тип, Вид)
	Результат        = Неопределено;
	РезультатПолучен = Ложь;

	ИмяМетода = "НайтиСсылку_" + Тип + "_" + Вид;
	Если АнтикэшМетодов.Получить(ИмяМетода) = Неопределено Тогда
		Попытка
			Результат        = Вычислить("ОсобыеСущности." + ИмяМетода + "(ЭлЭлемент)");
			РезультатПолучен = Истина;

		Исключение
			Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
				АнтикэшМетодов.Вставить(ИмяМетода, Истина);
			Иначе
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;

	Если Не РезультатПолучен Тогда
		ИмяМетода = "ПолучитьСсылку_" + Тип + "_" + Вид;
		Если АнтикэшМетодов.Получить(ИмяМетода) = Неопределено Тогда
			Попытка
				Результат = Вычислить("ОсобыеСущности." + ИмяМетода + "(ЭлЭлемент.УидЭлемента)");

			Исключение
				Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
					АнтикэшМетодов.Вставить(ИмяМетода, Истина);
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		Если Тип = "Справочники" Тогда
			Результат = Справочники[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
		ИначеЕсли Тип = "Документы" Тогда
			Результат = Документы[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция Ссылка(ЭлЗначениеСсылка) Экспорт
	Стр = НайтиВКэше(ЭлЗначениеСсылка.ТипСущности.ИмяСущности, ЭлЗначениеСсылка.УидЭлемента);
	Если Стр = Неопределено Тогда
		Возврат Десериализовать(Десериализатор.ПолучитьЭлементПоСсылке(ЭлЗначениеСсылка), ЭлЗначениеСсылка.ТипСущности.Тип, ЭлЗначениеСсылка.ТипСущности.Вид);
	Иначе
		Возврат Стр.Ссылка;
	КонецЕсли;
КонецФункции

Процедура Десериализовать_Справочники(ЭлЭлемент, Вид, Объект)
	Мета = Объект.Метаданные();

	ИтРеквизиты = ИтераторРеквизиты(ЭлЭлемент);
	Пока ИтераторСледующий(ИтРеквизиты) Цикл
		ЭлРеквизит = ИтРеквизиты.Элемент;
		ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

		МетаРек = Мета.Реквизиты.Найти(ИмяРеквизита);
		Если МетаРек <> Неопределено Тогда
			ДесериализоватьРеквизит(МетаРек.Тип, ЭлРеквизит, Объект);

		ИначеЕсли ИмяРеквизита = "Код" Тогда
			Если Мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				Объект.Код = ЗначениеСтрока(ЭлРеквизит);
			Иначе
				Объект.Код = ЗначениеЧисло(ЭлРеквизит);
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "Наименование" Тогда
			Объект.Наименование = ЗначениеСтрока(ЭлРеквизит);
		ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
			Объект.ПометкаУдаления = ЗначениеБулево(ЭлРеквизит);
		ИначеЕсли ИмяРеквизита = "Владелец" Тогда
			Объект.Владелец = Ссылка(ЗначениеСсылка(ЭлРеквизит));
		ИначеЕсли ИмяРеквизита = "Родитель" Тогда
			Объект.Родитель = Ссылка(ЗначениеСсылка(ЭлРеквизит));
		ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
			Если Не Объект.ЭтоГруппа И ЗначениеБулево(ЭлРеквизит) Тогда
				ВызватьИсключение "Элемент справочника содержит реквизит [ЭтоГруппа], но создан как элемент!";
			КонецЕсли;
		Иначе
			Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!");
			//ВызватьИсключение "Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!";
		КонецЕсли;
	КонецЦикла;

	ДесериализоватьТабличныеЧасти(ЭлЭлемент, Вид, Объект, Мета);
КонецПроцедуры

Процедура Десериализовать_Документы(ЭлЭлемент, Вид, Объект)
	Мета = Объект.Метаданные();

	ИтРеквизиты = ИтераторРеквизиты(ЭлЭлемент);
	Пока ИтераторСледующий(ИтРеквизиты) Цикл
		ЭлРеквизит = ИтРеквизиты.Элемент;
		ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

		МетаРек = Мета.Реквизиты.Найти(ИмяРеквизита);
		Если МетаРек <> Неопределено Тогда
			ДесериализоватьРеквизит(МетаРек.Тип, ЭлРеквизит, Объект);

		ИначеЕсли ИмяРеквизита = "Номер" Тогда
			Если Мета.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
				Объект.Номер = ЗначениеСтрока(ЭлРеквизит);
			Иначе
				Объект.Номер = ЗначениеЧисло(ЭлРеквизит);
			КонецЕсли;
		ИначеЕсли ИмяРеквизита = "Дата" Тогда
			Объект.Дата = ЗначениеДата(ЭлРеквизит);
		ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
		ИначеЕсли ИмяРеквизита = "Проведен" Тогда
		Иначе
			Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в документе <" + Вид + ">!");
			//ВызватьИсключение "Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!";
		КонецЕсли;
	КонецЦикла;
	Объект.ПометкаУдаления = ПолучитьРеквизитБулево(ЭлЭлемент, "ПометкаУдаления");

	ДесериализоватьТабличныеЧасти(ЭлЭлемент, Вид, Объект, Мета);
КонецПроцедуры

Процедура ДесериализоватьРеквизит(МетарекТип, ЭлРеквизит, Объект)
	Если МетаРекТип.СодержитТип(Тип("Строка")) Тогда
		Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеСтрока(ЭлРеквизит);
	ИначеЕсли МетаРекТип.СодержитТип(Тип("Число")) Тогда
		Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеЧисло(ЭлРеквизит);
	ИначеЕсли МетаРекТип.СодержитТип(Тип("Булево")) Тогда
		Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеБулево(ЭлРеквизит);
	ИначеЕсли МетаРекТип.СодержитТип(Тип("Дата")) Тогда
		Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеДата(ЭлРеквизит);
	Иначе
		ПервыйТип = МетаРекТип.Типы()[0];
		Если Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
			Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеПеречисление(ЭлРеквизит);
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
			Объект[ЭлРеквизит.ИмяРеквизита] = Ссылка(ЗначениеСсылка(ЭлРеквизит));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ДесериализоватьТабличныеЧасти(ЭлЭлемент, Вид, Объект, Мета)
	ИтТабличныеЧасти = ИтераторТабличныеЧасти(ЭлЭлемент);
	Пока ИтераторСледующий(ИтТабличныеЧасти) Цикл
		ИмяТабличнойЧасти = ИтТабличныеЧасти.Элемент.ИмяТабличнойЧасти;

		МетаТЧ = Мета.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
		Если МетаТЧ <> Неопределено Тогда
			ТЧ = Объект[ИмяТабличнойЧасти];
			ТЧ.Очистить();
			
			ИтСтроки = ИтераторСтроки(ИтТабличныеЧасти.Элемент);
			Пока ИтераторСледующий(ИтСтроки) Цикл
				СтрокаТЧ = ТЧ.Добавить();
				
				ИтРеквизиты = ИтераторРеквизиты(ИтСтроки.Элемент);
				Пока ИтераторСледующий(ИтРеквизиты) Цикл
					ЭлРеквизит = ИтРеквизиты.Элемент;
					ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

					МетаРек = МетаТЧ.Реквизиты.Найти(ИмяРеквизита);
					Если МетаРек <> Неопределено Тогда
						ДесериализоватьРеквизит(МетаРек.Тип, ЭлРеквизит, СтрокаТЧ);
					Иначе
						Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в табличной части [" + ИмяТабличнойЧасти + "] <" + Вид + ">!");
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Сообщить("Не найдена табличная чать [" + ИмяТабличнойЧасти + "] в <" + Вид + ">!");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//---------------------------------------------------------------------------------------------

Процедура ИнициализироватьКэшЭлементов()
	КэшЭлементов = Новый ТаблицаЗначений;
	КэшЭлементов.Колонки.Добавить("ИмяСущности");
	КэшЭлементов.Колонки.Добавить("УидЭлемента");
	КэшЭлементов.Колонки.Добавить("Ссылка");
	КэшЭлементов.Колонки.Добавить("Обновлен", Новый ОписаниеТипов("Булево"));

	КэшЭлементов.Индексы.Добавить("ИмяСущности, УидЭлемента");
КонецПроцедуры

Функция НайтиВКэше(ИмяСущности, УидЭлемента)
	Стр = КэшЭлементов.НайтиСтроки(Новый Структура("ИмяСущности, УидЭлемента", ИмяСущности, УидЭлемента));
	Возврат ?(Стр.Количество() = 0, Неопределено, Стр[0]);
КонецФункции

Функция ДобавитьВКэш(ИмяСущности, УидЭлемента)
	Стр = КэшЭлементов.Добавить();
	Стр.ИмяСущности = ИмяСущности;
	Стр.УидЭлемента = УидЭлемента;
	Возврат Стр;
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура Инициализировать()
	ОсобыеСущности = Обработки.e2ОсобыеСущности.Создать();
	ОсобыеСущности.УстановитьДесериализатор(ЭтотОбъект);
	
	РежимXML  = Ложь;
	РежимXDTO = Ложь;

	ИнициализироватьКэшЭлементов();
	АнтикэшМетодов = Новый Соответствие;
КонецПроцедуры

Функция ИнициализироватьXDTO() Экспорт
	Инициализировать();
	Десериализатор = Обработки.e2ДесериализаторXDTO.Создать().Инициализировать(ОсобыеСущности);
	
	РежимXDTO = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция ИнициализироватьXML() Экспорт
	Инициализировать();
	Десериализатор = Обработки.e2ДесериализаторXML.Создать().Инициализировать(ОсобыеСущности);
	
	РежимXML = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Процедура Закрыть() Экспорт
	Десериализатор = Неопределено;
	ОсобыеСущности = Неопределено;
КонецПроцедуры

РежимXML  = Ложь;
РежимXDTO = Ложь;