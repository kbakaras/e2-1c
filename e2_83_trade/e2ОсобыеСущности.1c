Перем СтрокаСоединенияAgr;
Перем УидСистемы;
Перем ИмяСистемы;
Перем ПространствоИмен;
Перем ПризнакПропускаПроверкиСистемы;

Перем КэшТиповСущности;

Перем Десериализатор;
Перем Сериализатор;

//---------------------------------------------------------------------------------------------

Процедура СериализоватьДляСписка_Справочники_Контрагенты(Ссылка, ЭлЭлемент, Сериализатор) Экспорт
	Сериализатор.СериализоватьДляСписка_Справочники(Ссылка, ЭлЭлемент);
	Сериализатор.ДобавитьРеквизитЕслиЗаполнен(ЭлЭлемент, "ИНН", Ссылка.ИНН);
КонецПроцедуры

Процедура СериализоватьДляСписка_Справочники_ФизическиеЛица(Ссылка, ЭлЭлемент, Сериализатор) Экспорт
	Сериализатор.СериализоватьДляСписка_Справочники(Ссылка, ЭлЭлемент);
	Сериализатор.СоздатьРеквизит(ЭлЭлемент, "Работает", ФизлицоРаботает(Ссылка));
КонецПроцедуры
Процедура Сериализовать_Справочники_ФизическиеЛица(Ссылка, ЭлЭлемент, Сериализатор) Экспорт
	Сериализатор.Сериализовать_Справочники(Ссылка, ЭлЭлемент);
	Сериализатор.СоздатьРеквизит(ЭлЭлемент, "Работает", ФизлицоРаботает(Ссылка));
КонецПроцедуры

Функция ФизлицоРаботает(Ссылка)
	Запрос  = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(*) КАК Количество
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И СотрудникиОрганизаций.ДатаПриемаНаРаботуВКомпанию <> ДАТАВРЕМЯ(1, 1, 1)
			|	И СотрудникиОрганизаций.ДатаУвольненияИзКомпании = ДАТАВРЕМЯ(1, 1, 1)");
	Запрос.УстановитьПараметр("Физлицо", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Возврат Выборка.Количество > 0;
КонецФункции

//Процедура Сериализовать_Справочники_Контрагенты(Ссылка, ЭлЭлемент, Сериализатор) Экспорт
//	Сериализатор.Сериализовать_Справочники(Ссылка, ЭлЭлемент);

//	ПодчиненныйСправочник = "БанковскиеСчета";
//	ВыборкаСпр = Справочники[ПодчиненныйСправочник].Выбрать(, Ссылка);
//	Пока ВыборкаСпр.Следующий() Цикл
//		Если Не ВыборкаСпр.ПометкаУдаления Тогда
//			Сериализатор.Сериализовать(ВыборкаСпр.Ссылка, "Справочники", ПодчиненныйСправочник);
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры

//---------------------------------------------------------------------------------------------

// Специализированная функция для получения ссылки на элемент по УИД. Имеет смысл определять
// такую функцию для элементов, у которых синхронизационный УИД находится в реквизите.
// Функция ПолучитьСсылку_ТипСущности_ВидСущности(УИДЭлемент) Экспорт
//Функция ПолучитьСсылку_Справочники_ФизическиеЛица(УИДЭлемента) Экспорт
//	Ссылка = Справочники.ФизическиеЛица.НайтиПоРеквизиту("УИДЗУП", УИДЭлемента);
//	Возврат ?(ЗначениеЗаполнено(Ссылка), Ссылка, Неопределено);
//КонецФункции


// Специализированная функция для поиска ссылки на элемент не обязательно по УИД. Например,
// часто справочник валют генерируется в базах автоматически. При синхронизации УИД не совпадает,
// а создавать специальный синхронизационный УИД не хочется. При этом можно полагаться на код валюты.
// Параметр Элемент - ссылка на узел сообщения, соответствующий искомому элементу.
// Функция НайтиСсылку_ТипСущности_ВидСущности(Элемент) Экспорт
Функция НайтиСсылку_Справочники_Валюты(ЭлЭлемент) Экспорт
	Ссылка = Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
	Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
		ЗапаснаяСсылка = Справочники.Валюты.НайтиПоКоду(Десериализатор.ПолучитьРеквизитСтрока(ЭлЭлемент, "Код"));
		Если Не ЗначениеЗаполнено(ЗапаснаяСсылка) Тогда
			ЗапаснаяСсылка = Справочники.Валюты.НайтиПоНаименованию(Десериализатор.ПолучитьРеквизитСтрока(ЭлЭлемент, "Наименование"), Истина);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗапаснаяСсылка) Тогда
			Возврат ЗапаснаяСсылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Ссылка;
КонецФункции

//---------------------------------------------------------------------------------------------

Функция ПолучитьПризнакПропускаПроверкиСистемы() Экспорт
	Если ПризнакПропускаПроверкиСистемы = Неопределено Тогда
		ПризнакПропускаПроверкиСистемы = Обработки.ЭкземплярыБаз.Создать().ПолучитьПараметрЭкземпляра("skip.system.check.e2", Ложь);
	КонецЕсли;
	Возврат ПризнакПропускаПроверкиСистемы;
КонецФункции

Функция ПолучитьСтрокуСоединенияAgr() Экспорт
	Если СтрокаСоединенияAgr = Неопределено Тогда
		ДополненияЭкземплярыБаз = Обработки.ЭкземплярыБаз.Создать();

		СтрокаСоединенияAgr = ДополненияЭкземплярыБаз.ПолучитьПараметрЭкземпляра("url.agr");
		Если СтрокаСоединенияAgr = Неопределено Тогда
			ВызватьИсключение "Параметр [url.agr] не определён для данного экземпляра базы!";
		КонецЕсли;
	КонецЕсли;
	Возврат СтрокаСоединенияAgr;
КонецФункции

Функция ПолучитьУидСистемы() Экспорт
	Возврат УидСистемы;
КонецФункции

Функция ПолучитьИмяСистемы() Экспорт
	Возврат ИмяСистемы;
КонецФункции

Функция ПолучитьПространствоИмен() Экспорт
	Возврат ПространствоИмен;
КонецФункции

//---------------------------------------------------------------------------------------------

Функция ТипСущности(ИмяСущности) Экспорт
	Сущность = КэшТиповСущности[ИмяСущности];
	Если Сущность = Неопределено Тогда
		ИндексТочки = Найти(ИмяСущности, ".");
		Если ИндексТочки <> 0 Тогда
			Сущность = Новый Структура("ИмяСущности, Тип, Вид");
			Сущность.ИмяСущности = ИмяСущности;
			Сущность.Тип =  Лев(ИмяСущности, ИндексТочки - 1);
			Сущность.Вид = Сред(ИмяСущности, ИндексТочки + 1);
			КэшТиповСущности.Вставить(ИмяСущности, Сущность);
		Иначе
			ВызватьИсключение "Не удалось распознать тип запрашиваемого элемента: <" + ИмяСущности + ">!";
		КонецЕсли;
	КонецЕсли;
	Возврат Сущность;
КонецФункции

Функция ОшибкаВызоваМетода(ИнформацияОбОшибке) Экспорт
	Возврат Лев(ИнформацияОбОшибке.Описание, 26) = "Метод объекта не обнаружен";
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура УстановитьСериализатор(_Сериализатор) Экспорт
	Сериализатор = _Сериализатор;
КонецПроцедуры

Процедура УстановитьДесериализатор(_Десериализатор) Экспорт
	Десериализатор = _Десериализатор;
КонецПроцедуры

Процедура Инициализировать()
	ДополненияЭкземплярыБаз = Обработки.ЭкземплярыБаз.Создать();

	УидСистемы       = ДополненияЭкземплярыБаз.ПолучитьСтрокуUID();
	ИмяСистемы       = ДополненияЭкземплярыБаз.ПолучитьНаименованиеЭкземпляра();
	ПространствоИмен = Метаданные.WebСервисы.e2.ПространствоИмен;

	КэшТиповСущности = Новый Соответствие;
КонецПроцедуры

Инициализировать();