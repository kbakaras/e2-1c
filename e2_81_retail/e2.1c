Функция list(ЗапросСписка) Экспорт
	Десериализатор = Обработки.e2Десериализатор.Создать().ИнициализироватьXDTO();
	Сериализатор   = Обработки.e2Сериализатор.Создать().ИнициализироватьXDTO();

	Ответ = Сериализатор.СоздатьОтветСписок();

	ИтЗапросыСсылки = Десериализатор.ИтераторЗапросыСсылки(ЗапросСписка);
	Пока Десериализатор.ИтераторСледующий(ИтЗапросыСсылки) Цикл
		Ссылка = Десериализатор.ПолучитьЭлемент(ИтЗапросыСсылки.Элемент);
		Если Ссылка <> Неопределено Тогда
			Сериализатор.СериализоватьДляСписка(Ссылка,,, Истина);
		КонецЕсли;
	КонецЦикла;

	ИтЗапросыСущности = Десериализатор.ИтераторЗапросыСущности(ЗапросСписка);
	Пока Десериализатор.ИтераторСледующий(ИтЗапросыСущности) Цикл
		Выборка = Десериализатор.НайтиЭлементы(ИтЗапросыСущности.Элемент);
		Пока Выборка.Следующий() Цикл
			Сериализатор.СериализоватьДляСписка(Выборка.Ссылка,,, Истина);
		КонецЦикла;
	КонецЦикла;

	Сериализатор.Закрыть();
	Десериализатор.Закрыть();

	Возврат Ответ;
КонецФункции

Функция element(ЗапросЭлементов) Экспорт
	Десериализатор = Обработки.e2Десериализатор.Создать().ИнициализироватьXDTO();
	Сериализатор   = Обработки.e2Сериализатор.Создать().ИнициализироватьXDTO();

	Ответ = Сериализатор.СоздатьОтветЭлементы();

	ИтЗапросыСсылки = Десериализатор.ИтераторЗапросыСсылки(ЗапросЭлементов);
	Пока Десериализатор.ИтераторСледующий(ИтЗапросыСсылки) Цикл
		Ссылка = Десериализатор.ПолучитьЭлемент(ИтЗапросыСсылки.Элемент);
		Если Ссылка <> Неопределено Тогда
			Сериализатор.Сериализовать(Ссылка,,, Истина);
		КонецЕсли;
	КонецЦикла;

	ИтЗапросыСущности = Десериализатор.ИтераторЗапросыСущности(ЗапросЭлементов);
	Пока Десериализатор.ИтераторСледующий(ИтЗапросыСущности) Цикл
		Выборка = Десериализатор.НайтиЭлементы(ИтЗапросыСущности.Элемент);
		Пока Выборка.Следующий() Цикл
			Сериализатор.Сериализовать(Выборка.Ссылка,,, Истина);
		КонецЦикла;
	КонецЦикла;

	Сериализатор.Закрыть();
	Десериализатор.Закрыть();

	Возврат Ответ;
КонецФункции

Процедура update(updateRequest) Экспорт
	Десериализатор = Обработки.e2Десериализатор.Создать().ИнициализироватьXDTO();
	Десериализатор.ДесериализоватьИзмененные(updateRequest);
	Десериализатор.Закрыть();
КонецПроцедуры

Процедура repeat(repeatRequest) Экспорт
	Узел = ПланыОбмена.e2.НайтиПоКоду("e2");
	
	Десериализатор = Обработки.e2Десериализатор.Создать().ИнициализироватьXDTO();
	ОсобыеСущности = Обработки.e2ОсобыеСущности.Создать();
	
	ИтСущности = Десериализатор.ИтераторСущности(repeatRequest);
	Пока Десериализатор.ИтераторСледующий(ИтСущности) Цикл
		ТипСущности = ОсобыеСущности.ТипСущности(ИтСущности.Элемент.ИмяСущности);
		Тип = ТипСущности.Тип;
		Вид = ТипСущности.Вид;
		
		ИтЭлементы = Десериализатор.ИтераторЭлементыИзмененные(ИтСущности.Элемент);
		Пока Десериализатор.ИтераторСледующий(ИтЭлементы) Цикл
			ЭлЭлемент = ИтЭлементы.Элемент;
			
			Ссылка = Неопределено;
			Если Тип = "Справочники" Тогда
				Ссылка = Справочники[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
			ИначеЕсли Тип = "Документы" Тогда
				Ссылка = Документы[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
			КонецЕсли;

			Если Ссылка <> Неопределено Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
				Сообщить("Зарегистрирован объект " + Ссылка, СтатусСообщения.Обычное);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Десериализатор.Закрыть();
КонецПроцедуры

//---------------------------------------------------------------------------------------------

Функция МаксимальныйКодСообщения()
	Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(e2ОчередьСообщений.Код) КАК Код
			|ИЗ
			|	Справочник.e2ОчередьСообщений КАК e2ОчередьСообщений");
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат ?(ЗначениеЗаполнено(Выборка.Код), Выборка.Код, 0);
КонецФункции

Процедура ПодготовкаСообщений(ПорогРазмера = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(ПорогРазмера) Тогда
		ПорогРазмера = Обработки.ЭкземплярыБаз.Создать().ПолучитьПараметрЭкземпляра("threshold.e2", 5000000);
	КонецЕсли;

	Узел = ПланыОбмена.e2.НайтиПоКоду("e2");
	
	НомерСообщения = Макс(Узел.НомерОтправленного, МаксимальныйКодСообщения()) + 1;

	КоличествоИзмененныхЭлементов = 0;

	// Формирует выборку измененных данных для передачи их в тот или иной узел плана обмена. При этом
	// в процессе выборки изменений в записи регистрации изменений проставляется номер сообщения обмена
	// данными, в котором должны передаваться изменения. Номер сообщения в записи регистрации проставляется
	// для того, чтобы при подтверждении приема сообщения, в котором передавались изменения соответствующие
	// записи регистрации изменений были удалены и в дальнейшем изменения больше не передавались.
	//
	// А также для того, чтобы, если в процессе работы с выборкой произойдёт новая регистрация каких-либо
	// входящих в неё объектов, эта информация не была утеряна. В случае повторной регистрации в таблице регистрации
	// очищается номер сообщения.
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, НомерСообщения);
	
	Если Выборка.Следующий() Тогда
		Сериализатор = Обработки.e2Сериализатор.Создать().ИнициализироватьXML();
		Сериализатор.СоздатьЗапросОбновления();
		ТекстСообщения = "";

		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если СтрДлина(ТекстСообщения) > ПорогРазмера Тогда
				Сериализатор.Закрыть();

				Спр = Справочники.e2ОчередьСообщений.СоздатьЭлемент();
				Спр.Код                           = НомерСообщения;
				Спр.Сообщение                     = ТекстСообщения;
				Спр.ДатаФормирования              = ТекущаяДата();
				Спр.КоличествоИзмененныхЭлементов = КоличествоИзмененныхЭлементов;
				Спр.РазмерСообщения               = СтрДлина(ТекстСообщения);
				Спр.Записать();
				
				Сериализатор = Обработки.e2Сериализатор.Создать().ИнициализироватьXML();
				Сериализатор.СоздатьЗапросОбновления();
				
				КоличествоИзмененныхЭлементов = 0;
				НомерСообщения = НомерСообщения + 1;
			КонецЕсли;

			Сериализатор.Сериализовать(Выборка.Получить().Ссылка,,, Истина);
			КоличествоИзмененныхЭлементов = КоличествоИзмененныхЭлементов + 1;
			
			ТекстСообщения = Сериализатор.ТекстСообщения();
		КонецЦикла;

		Сериализатор.Закрыть();

		Спр = Справочники.e2ОчередьСообщений.СоздатьЭлемент();
		Спр.Код                           = НомерСообщения;
		Спр.Сообщение                     = ТекстСообщения;
		Спр.ДатаФормирования              = ТекущаяДата();
		Спр.КоличествоИзмененныхЭлементов = КоличествоИзмененныхЭлементов;
		Спр.РазмерСообщения               = СтрДлина(ТекстСообщения);
		Спр.Записать();

		// Сейчас запись сообщений в справочник происходит не в одной транзакции с очисткой регистрации,
		// поэтому в случае сбоя сообщения могут дублироваться. Это не является проблемой, так как
		// обмен подразумевает идемпотентность.
		
		НачатьТранзакцию();
		УзелОбъект = Узел.ПолучитьОбъект();
		УзелОбъект.НомерОтправленного = НомерСообщения;
		УзелОбъект.Записать();

		// Если в качестве первого параметра указан одиночный узел, то в параметре может быть указан номер сообщения.
		// В этом случае метод УдалитьРегистрациюИзменений удаляет из всех таблиц регистрации изменений все записи
		// относящиеся к указанному узлу, у которых номер сообщения меньше или равен значению второго параметра.
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НомерСообщения);
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура ОтправкаСообщений() Экспорт
	Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	e2ОчередьСообщений.Ссылка
			|ИЗ
			|	Справочник.e2ОчередьСообщений КАК e2ОчередьСообщений
			|
			|УПОРЯДОЧИТЬ ПО
			|	e2ОчередьСообщений.Код");

	Узел = ПланыОбмена.e2.НайтиПоКоду("e2").ПолучитьОбъект();
	Сериализатор = Обработки.e2Сериализатор.Создать().ИнициализироватьXML();

	Пока Истина Цикл
		Выборка = Запрос.Выполнить().Выбрать();
		Если Не Выборка.Следующий() Тогда
			Прервать;
		КонецЕсли;

		НачатьТранзакцию();
		СпрСообщение = Выборка.Ссылка;
		Сериализатор.ОтправитьСообщениеСПроверкойСистемы(СпрСообщение.Сообщение);
		Узел.НомерПринятого = СпрСообщение.Код;
		Узел.Записать();
		СпрСообщение.ПолучитьОбъект().Удалить();
		ЗафиксироватьТранзакцию();
	КонецЦикла;
КонецПроцедуры

Процедура ОтправкаОдногоСообщения() Экспорт
	Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	e2ОчередьСообщений.Ссылка
			|ИЗ
			|	Справочник.e2ОчередьСообщений КАК e2ОчередьСообщений
			|
			|УПОРЯДОЧИТЬ ПО
			|	e2ОчередьСообщений.Код");

	Узел = ПланыОбмена.e2.НайтиПоКоду("e2").ПолучитьОбъект();
	Сериализатор = Обработки.e2Сериализатор.Создать().ИнициализироватьXML();

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачатьТранзакцию();
		СпрСообщение = Выборка.Ссылка;
		Сериализатор.ОтправитьСообщениеСПроверкойСистемы(СпрСообщение.Сообщение);
		Узел.НомерПринятого = СпрСообщение.Код;
		Узел.Записать();
		СпрСообщение.ПолучитьОбъект().Удалить();
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры
