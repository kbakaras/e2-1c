Перем Сериализатор;
Перем ОсобыеСущности;

Перем РежимXML;
Перем РежимXDTO;

Перем АнтикэшМетодов;

Перем КэшЭлементов;
Перем КэшСущностей;

Перем СРАВНЕНИЕ Экспорт;

//---------------------------------------------------------------------------------------------

Процедура ПроверитьРежимXML()
	Если Не РежимXML Тогда
		ВызватьИсключение "Метод доступен только в режиме XML!";
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьРежимXDTO()
	Если Не РежимXDTO Тогда
		ВызватьИсключение "Метод доступен только в режиме XDTO!";
	КонецЕсли;
КонецПроцедуры

//=============================================================================================

// ЗапрашиваемыеСистемы (Необязательный) - Массив с идентификаторами систем, в которые будет направлен запрос.
// Если не указан, запрос будет направлен во все доступные системы.
Процедура СоздатьЗапросСписка(ЗапрашиваемыеСистемы = Неопределено) Экспорт
	ПроверитьРежимXML();
	Сериализатор.СоздатьЗапросСписка(ЗапрашиваемыеСистемы);
КонецПроцедуры

Процедура СоздатьЗапросЭлементов(ЗапрашиваемыеСистемы = Неопределено) Экспорт
	ПроверитьРежимXML();
	Сериализатор.СоздатьЗапросЭлементов(ЗапрашиваемыеСистемы);
КонецПроцедуры

Процедура ДобавитьЗапрашиваемуюСистему(УидСистемы) Экспорт
	ПроверитьРежимXML();
	Сериализатор.ДобавитьЗапрашиваемуюСистему(УидСистемы);
КонецПроцедуры

Процедура ДобавитьЗапросЭлемента(ИмяСущности, УидЭлемента) Экспорт
	ПроверитьРежимXML();
	Сериализатор.ДобавитьЗапросЭлемента(ИмяСущности, УидЭлемента);
КонецПроцедуры

Функция ДобавитьЗапросСущности(ИмяСущности) Экспорт
	ПроверитьРежимXML();
	Возврат Сериализатор.ДобавитьЗапросСущности(ИмяСущности);
КонецФункции

Процедура ДобавитьФильтр(ЗапросСущности, ИмяРеквизита, ВидСравнения, Значение) Экспорт
	ПроверитьРежимXML();
	
	Фильтр = Сериализатор.ДобавитьФильтр(ЗапросСущности, ИмяРеквизита, ВидСравнения);

	Тип = ТипЗнч(Значение);
	Если Тип = Тип("Строка") Или Тип = Тип("Число") Или Тип = Тип("Дата") Или Тип = Тип("Булево") Тогда
		Сериализатор.УстановитьЗначение(Фильтр, Значение);
	ИначеЕсли Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда
		Сериализатор.УстановитьЗначение(Фильтр, ЗначениеПеречисления(Значение));
	ИначеЕсли Метаданные.Справочники.Содержит(Значение.Метаданные()) Тогда
		Вид = Значение.Метаданные().Имя;
		Сериализатор.УстановитьСсылку(Фильтр, "Справочники." + Вид, Строка(Значение.УникальныйИдентификатор()));
		СериализоватьДляСписка(Значение, "Справочники", Вид);
	ИначеЕсли Метаданные.Документы.Содержит(Значение.Метаданные()) Тогда
		Вид = Значение.Метаданные().Имя;
		Сериализатор.УстановитьСсылку(Фильтр, "Документы." + Вид, Строка(Значение.УникальныйИдентификатор()));
		СериализоватьДляСписка(Значение, "Документы", Вид);
	КонецЕсли;
КонецПроцедуры

//---------------------------------------------------------------------------------------------

Функция ВыполнитьЗапрос() Экспорт
	ПроверитьРежимXML();
	Возврат Сериализатор.ВыполнитьЗапрос();
КонецФункции

//---------------------------------------------------------------------------------------------

Функция СоздатьОтветСписок() Экспорт
	ПроверитьРежимXDTO();
	Возврат Сериализатор.СоздатьОтветСписок();
КонецФункции

Функция СоздатьОтветЭлементы() Экспорт
	ПроверитьРежимXDTO();
	Возврат Сериализатор.СоздатьОтветЭлементы();
КонецФункции

//=============================================================================================

Функция СериализоватьОсобуюСущность(Тип, Вид, Ссылка, Элемент, ДляСписка)
	Если ОсобыеСущности <> Неопределено Тогда
		ИмяМетода = "Сериализовать" + ?(ДляСписка, "ДляСписка", "") + "_" + Тип + "_" + Вид;
		Если АнтикэшМетодов.Получить(ИмяМетода) = Неопределено Тогда
			Попытка
				Выполнить("ОсобыеСущности." + ИмяМетода + "(Ссылка, Элемент, ЭтотОбъект)");
				Возврат Истина;

			Исключение
				Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
					АнтикэшМетодов.Вставить(ИмяМетода, Истина);
				Иначе
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура СериализоватьДляСписка(Ссылка, Знач Тип = Неопределено, Знач Вид = Неопределено, ПризнакИзменения = Ложь) Экспорт
	Элемент = КэшЭлементов.Получить(Ссылка);
	Если Элемент = Неопределено Тогда
		Если Тип = Неопределено Тогда
			Тип = ТипСсылки(Ссылка);
		КонецЕсли;
		Если Вид = Неопределено Тогда
			Вид = Ссылка.Метаданные().Имя;
		КонецЕсли;

		Элемент = ДобавитьЭлемент(ПолучитьСущность(Тип, Вид), Ссылка);
		Если Не СериализоватьОсобуюСущность(Тип, Вид, Ссылка, Элемент, Истина) Тогда
			Если Тип = "Справочники" Тогда
				СериализоватьДляСписка_Справочники(Ссылка, Элемент);
			ИначеЕсли Тип = "Документы" Тогда
				СериализоватьДляСписка_Документы(Ссылка, Элемент);
			Иначе
				ВызватьИсключение СтрОшСериализацияНеПоддерживается(Тип, Вид);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПризнакИзменения Тогда
		Сериализатор.УстановитьПризнакИзменения(Элемент);
	КонецЕсли;
КонецПроцедуры

Процедура СериализоватьДляСписка_Справочники(Ссылка, Элемент) Экспорт
	Мета = Ссылка.Метаданные();

	Если Мета.ДлинаКода > 0 Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "Код", Ссылка.Код);
	КонецЕсли;
	Если Мета.ДлинаНаименования > 0 Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "Наименование", Ссылка.Наименование);
	КонецЕсли;
	Если Ссылка.ПометкаУдаления Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "ПометкаУдаления", Ссылка.ПометкаУдаления);
	КонецЕсли;
КонецПроцедуры

Процедура СериализоватьДляСписка_Документы(Ссылка, Элемент) Экспорт
КонецПроцедуры

//---------------------------------------------------------------------------------------------

Процедура Сериализовать(Ссылка, Знач Тип = Неопределено, Знач Вид = Неопределено, ПризнакИзменения = Ложь) Экспорт
	Элемент = КэшЭлементов.Получить(Ссылка);
	Если Элемент = Неопределено Тогда
		Если Тип = Неопределено Тогда
			Тип = ТипСсылки(Ссылка);
		КонецЕсли;
		Если Вид = Неопределено Тогда
			Вид = Ссылка.Метаданные().Имя;
		КонецЕсли;

		Элемент = ДобавитьЭлемент(ПолучитьСущность(Тип, Вид), Ссылка);
		Если Не СериализоватьОсобуюСущность(Тип, Вид, Ссылка, Элемент, Ложь) Тогда
			Если Тип = "Справочники" Тогда
				Сериализовать_Справочники(Ссылка, Элемент);
			ИначеЕсли Тип = "Документы" Тогда
				Сериализовать_Документы(Ссылка, Элемент);
			Иначе
				ВызватьИсключение СтрОшСериализацияНеПоддерживается(Тип, Вид);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ПризнакИзменения Тогда
		Сериализатор.УстановитьПризнакИзменения(Элемент);
	КонецЕсли;
КонецПроцедуры

Процедура Сериализовать_Справочники(Ссылка, Элемент) Экспорт
	Мета = Ссылка.Метаданные();

	Если Мета.ДлинаКода > 0 Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "Код", Ссылка.Код);
	КонецЕсли;
	Если Мета.ДлинаНаименования > 0 Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "Наименование", Ссылка.Наименование);
	КонецЕсли;
	Если Ссылка.ПометкаУдаления Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "ПометкаУдаления", Ссылка.ПометкаУдаления);
	КонецЕсли;
	Если Ссылка.ЭтоГруппа Тогда
		Сериализатор.СоздатьРеквизит(Элемент, "ЭтоГруппа", Ссылка.ЭтоГруппа);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ссылка.Владелец) Тогда
		Сериализовать(Ссылка.Владелец);
		ДобавитьРеквизитСсылка(Элемент, "Владелец", Ссылка.Владелец);
	КонецЕсли;
	Если ЗначениеЗаполнено(Ссылка.Родитель) Тогда
		Сериализовать(Ссылка.Родитель);
		ДобавитьРеквизитСсылка(Элемент, "Родитель", Ссылка.Родитель);
	КонецЕсли;

	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		Значение = Ссылка[Реквизит.Имя];
		Если ЗначениеЗаполнено(Значение) Тогда
			Тип = ТипЗнч(Значение);
			Если Тип = Тип("Строка") Или Тип = Тип("Число") Или Тип = Тип("Дата") Или Тип = Тип("Булево") Тогда
				Сериализатор.СоздатьРеквизит(Элемент, Реквизит.Имя, Значение);
			ИначеЕсли Тип = Тип("ХранилищеЗначения") Тогда
			ИначеЕсли Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда
				Сериализатор.СоздатьРеквизит(Элемент, Реквизит.Имя, ЗначениеПеречисления(Значение));
			ИначеЕсли Метаданные.Справочники.Содержит(Значение.Метаданные()) Тогда
				Вид = Значение.Метаданные().Имя;
				Сериализовать(Значение, "Справочники", Вид);
				ДобавитьРеквизитСсылка(Элемент, Реквизит.Имя, Значение, "Справочники." + Вид);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Сериализовать_Документы(Ссылка, Элемент) Экспорт
	
КонецПроцедуры	

//---------------------------------------------------------------------------------------------

Функция ПолучитьСущность(Тип, Вид)
	ИмяСущности = Тип + "." + Вид;
	Сущность = КэшСущностей.Получить(ИмяСущности);

	Если Сущность = Неопределено Тогда
		Сущность = Сериализатор.СоздатьСущность(ИмяСущности);
		КэшСущностей.Вставить(ИмяСущности, Сущность);
	КонецЕсли;

	Возврат Сущность;
КонецФункции

Функция ДобавитьЭлемент(Сущность, Ссылка) Экспорт
	Элемент = Сериализатор.СоздатьЭлемент(Сущность, Строка(Ссылка.УникальныйИдентификатор()));
	КэшЭлементов.Вставить(Ссылка, Элемент);
	Возврат Элемент;
КонецФункции

Процедура ДобавитьРеквизитЕслиЗаполнен(Элемент, ИмяРеквизита, Значение) Экспорт
	Если ЗначениеЗаполнено(Значение) Тогда
		Сериализатор.СоздатьРеквизит(Элемент, ИмяРеквизита, Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьРеквизитСсылка(Элемент, ИмяРеквизита, Ссылка, Знач ИмяСущности = Неопределено) Экспорт
	Если ИмяСущности = Неопределено Тогда
		ИмяСущности = ТипСсылки(Ссылка) + "." + Ссылка.Метаданные().Имя;
	КонецЕсли;
	Сериализатор.СоздатьРеквизитСсылка(Элемент, ИмяРеквизита, ИмяСущности, Строка(Ссылка.УникальныйИдентификатор()));
КонецПроцедуры

Функция ТипСсылки(Ссылка) Экспорт
	Если Метаданные.Справочники.Содержит(Ссылка.Метаданные()) Тогда
		Возврат "Справочники";
	ИначеЕсли Метаданные.Документы.Содержит(Ссылка.Метаданные()) Тогда
		Возврат "Документы";
	Иначе
		ВызватьИсключение "Тип ссылки <" + Ссылка + "> не сериализуется!";
	КонецЕсли;
КонецФункции

Функция ЗначениеПеречисления(ЗначениеПеречисления) Экспорт
	Вид = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[Вид].Индекс(ЗначениеПеречисления);
	Возврат Вид + "." + ЗначениеПеречисления.Метаданные().ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
КонецФункции

Функция СтрОшСериализацияНеПоддерживается(Тип, Вид) Экспорт
	Возврат "Не поддерживается сериализация элементов с типом <" + Тип + "." + Вид + ">!";
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура Инициализировать()
	ОсобыеСущности = Обработки.e2ОсобыеСущности.Создать();
	ОсобыеСущности.УстановитьСериализатор(ЭтотОбъект);

	РежимXML  = Ложь;
	РежимXDTO = Ложь;

	АнтикэшМетодов = Новый Соответствие;

	КэшЭлементов = Новый Соответствие;
	КэшСущностей = Новый Соответствие;
	
	СРАВНЕНИЕ = Новый Структура();
	СРАВНЕНИЕ.Вставить("Равно",   "equal");
	СРАВНЕНИЕ.Вставить("Подобно", "like");
КонецПроцедуры

Функция ИнициализироватьXDTO() Экспорт
	Инициализировать();
	Сериализатор = Обработки.e2СериализаторXDTO.Создать().Инициализировать(ОсобыеСущности);
	
	РежимXDTO = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Функция ИнициализироватьXML() Экспорт
	Инициализировать();
	Сериализатор = Обработки.e2СериализаторXML.Создать().Инициализировать(ОсобыеСущности);
	
	РежимXML = Истина;
	Возврат ЭтотОбъект;
КонецФункции

Процедура Закрыть() Экспорт
	Сериализатор   = Неопределено;
	ОсобыеСущности = Неопределено;
КонецПроцедуры

РежимXML  = Ложь;
РежимXDTO = Ложь;