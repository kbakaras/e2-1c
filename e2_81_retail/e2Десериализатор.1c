Перем Десериализатор;
Перем ОсобыеСущности;

Перем РежимXML;
Перем РежимXDTO;

Перем КэшЭлементов;
Перем АнтикэшМетодов;

Перем ТаблицаДокументов;

Перем ИмяОбъектаДляЗапроса;
Перем ExceptionIgnoreUpdate;

//---------------------------------------------------------------------------------------------

Функция СоздатьИтератор(ВидИтератора)
    Итератор = Новый Структура("ВидИтератора, Элемент, list, index, size");
    Итератор.ВидИтератора = ВидИтератора;
    Итератор.index        = -1;

    Возврат Итератор;
КонецФункции


Функция ИтераторСистемы(Результат) Экспорт
    Итератор = СоздатьИтератор("Системы");
    Десериализатор.ИнициализироватьИтераторСистемы(Результат, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторСущности(Контекст) Экспорт
    Итератор = СоздатьИтератор("Сущности");
    Десериализатор.ИнициализироватьИтераторСущности(Контекст, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторСостояния(Контекст) Экспорт
    Итератор = СоздатьИтератор("Состояния");
    Десериализатор.ИнициализироватьИтераторСостояния(Контекст, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторЭлементы(ЭлСущность) Экспорт
    Итератор = СоздатьИтератор("Элементы");
    Десериализатор.ИнициализироватьИтераторЭлементы(ЭлСущность, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторЭлементыИзмененные(ЭлСущность) Экспорт
    Итератор = СоздатьИтератор("Элементы");
    Десериализатор.ИнициализироватьИтераторЭлементыИзмененные(ЭлСущность, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторРеквизиты(ЭлЭлемент) Экспорт
    Итератор = СоздатьИтератор("Реквизиты");
    Десериализатор.ИнициализироватьИтераторРеквизиты(ЭлЭлемент, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторРеквизитыИд(ЭлЭлемент) Экспорт
    Итератор = СоздатьИтератор("Реквизиты");
    Десериализатор.ИнициализироватьИтераторРеквизитыИд(ЭлЭлемент, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторТабличныеЧасти(ЭлЭлемент) Экспорт
    Итератор = СоздатьИтератор("ТабличныеЧасти");
    Десериализатор.ИнициализироватьИтераторТабличныеЧасти(ЭлЭлемент, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторСтроки(ЭлТабличнаяЧасть) Экспорт
    Итератор = СоздатьИтератор("Строки");
    Десериализатор.ИнициализироватьИтераторСтроки(ЭлТабличнаяЧасть, Итератор);
    Возврат Итератор;
КонецФункции


Функция ИтераторЗапросыСсылки(Запрос) Экспорт
    Итератор = СоздатьИтератор("ЗапросыСсылки");
    Десериализатор.ИнициализироватьИтераторЗапросыСсылки(Запрос, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторЗапросыСущности(Запрос) Экспорт
    Итератор = СоздатьИтератор("ЗапросыСущности");
    Десериализатор.ИнициализироватьИтераторЗапросыСущности(Запрос, Итератор);
    Возврат Итератор;
КонецФункции

Функция ИтераторФильтры(ЭлЗапросСущности)
    Итератор = СоздатьИтератор("Фильтры");
    Десериализатор.ИнициализироватьИтераторФильтры(ЭлЗапросСущности, Итератор);
    Возврат Итератор;
КонецФункции


Функция ИтераторСледующий(Итератор) Экспорт
    Если Итератор.index + 1 < Итератор.size Тогда
        Итератор.index = Итератор.index + 1;
        Десериализатор.УстановитьИтератор(Итератор);
        Возврат Истина;
    Иначе
        Возврат Ложь;
    КонецЕсли;
КонецФункции

//---------------------------------------------------------------------------------------------

Функция ПолучитьСущность(ЭлСистема, ИмяСущности) Экспорт
    Возврат Десериализатор.ПолучитьСущность(ЭлСистема, ИмяСущности);
КонецФункции

//---------------------------------------------------------------------------------------------

Функция СтрОшПоискНеПоддерживается(Тип, Вид)
    Возврат "Не поддерживается поиск элементов с типом <" + Тип + "." + Вид + ">!";
КонецФункции

Функция СтрОшОбнаруженЦикл()
    Возврат "Обнаружен цикл в атрибутах синхронизации!";
КонецФункции

Функция СтрОшУсловиеНеПоддерживается(condition)
    Возврат "Условие <" + condition + "> не поддерживается!";
КонецФункции

Функция СтрОшНеНайденЭлементДляФильтрации(ЭлЗначениеСсылка)
    Возврат "Не найден элемент <" + ЭлЗначениеСсылка.ТипСущности.Тип + "." + ЭлЗначениеСсылка.ТипСущности.Вид + ": " + ЭлЗначениеСсылка.УидЭлемента + "> для условия фильтрации!";
КонецФункции

Функция СтрОшНеНайденАтрибут(ИмяРеквизита, Тип)
    Возврат "Не удалось определить специфический атрибут (" + ИмяРеквизита + ") для элемента типа [" + Тип + "]!"
КонецФункции

Функция СтрОшНетАтрибутовСинхронизации()
    Возврат "Для элемента не найдено ни одного атрибута для синхронизации!";
КонецФункции

Функция СтрОшБолееОдногоЭлементСинхронизации()
    Возврат "Найдено более одного элемента по реквизитам для синхронизации!";
КонецФункции

//---------------------------------------------------------------------------------------------

Функция ПолучитьРеквизитСтрока(ЭлЭлемент, ИмяРеквизита) Экспорт
    Возврат ЗначениеСтрока(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитБулево(ЭлЭлемент, ИмяРеквизита) Экспорт
    Возврат ЗначениеБулево(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитДата(ЭлЭлемент, ИмяРеквизита) Экспорт
    Возврат ЗначениеДата(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитЧисло(ЭлЭлемент, ИмяРеквизита) Экспорт
    Возврат ЗначениеЧисло(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитПеречисление(ЭлЭлемент, ИмяРеквизита) Экспорт
    Возврат ЗначениеПеречисление(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции

Функция ПолучитьРеквизитСсылку(ЭлЭлемент, ИмяРеквизита) Экспорт
    Возврат ЗначениеСсылка(Десериализатор.ПолучитьРеквизит(ЭлЭлемент, ИмяРеквизита));
КонецФункции


Функция ЗначениеСтрока(ЭлРеквизит)
    Возврат Десериализатор.РеквизитЗначение(ЭлРеквизит);
КонецФункции

Функция ЗначениеБулево(ЭлРеквизит)
    Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
    Возврат ?(Значение = Неопределено, Ложь, Значение = "true");
КонецФункции

Функция ЗначениеДата(ЭлРеквизит)
    Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
    Возврат ?(Значение = Неопределено, Дата(1, 1, 1), XMLЗначение(Тип("Дата"), Значение));
КонецФункции

Функция ЗначениеЧисло(ЭлРеквизит)
    Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
    Возврат ?(Значение = Неопределено, 0, Число(Значение));
КонецФункции

Функция ЗначениеПеречисление(ЭлРеквизит)
    Значение = Десериализатор.РеквизитЗначение(ЭлРеквизит);
    Если Значение <> Неопределено Тогда
        ИндексТочки = Найти(Значение, ".");
        Значение = Перечисления[Лев(Значение, ИндексТочки - 1)][Сред(Значение, ИндексТочки + 1)];
    КонецЕсли;

    Возврат Значение;
КонецФункции

Функция ЗначениеСсылка(ЭлРеквизит)
    Возврат Десериализатор.РеквизитСсылка(ЭлРеквизит);
КонецФункции

//---------------------------------------------------------------------------------------------

Функция НайтиЭлементы(ЭлЗапросСущности) Экспорт
    ТипСущности = ОсобыеСущности.ТипСущности(ЭлЗапросСущности.ИмяСущности);
    ИтФильтры = ИтераторФильтры(ЭлЗапросСущности);

    Тип = ТипСущности.Тип;
    Вид = ТипСущности.Вид;

    Если ИтФильтры.size = 0 Тогда
        Если Тип = "Справочники" Тогда
            Возврат Справочники[Вид].Выбрать();
        ИначеЕсли Тип = "Документы" Тогда
            Возврат Документы[Вид].Выбрать();
        ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
            Возврат ПланыВидовХарактеристик[Вид].Выбрать();
        КонецЕсли;

    Иначе
        Мета = Метаданные[Тип][Вид];

        Запрос = Новый Запрос();
        Условие = "";

        Пока ИтераторСледующий(ИтФильтры) Цикл
            ЭлФильтр = ИтФильтры.Элемент;
            Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", Условие);

            ИмяРеквизита = ЭлФильтр.ИмяРеквизита;

            Если ЭлФильтр.Сравнение = "equal" Тогда
                Условие = Условие + "(" + ИмяРеквизита + " = &" + ИмяРеквизита + ")";
            ИначеЕсли ЭлФильтр.Сравнение = "like" Тогда
                Условие = Условие + "(" + ИмяРеквизита + " ПОДОБНО &" + ИмяРеквизита + ")";
            Иначе
                ВызватьИсключение СтрОшУсловиеНеПоддерживается(ЭлФильтр.Сравнение);
            КонецЕсли;

            Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеАтрибута(Тип, Мета, ЭлФильтр, Истина, Ложь));
        КонецЦикла;

        Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ " + ИмяОбъектаДляЗапроса[Тип] + "." + Вид + " ГДЕ " + Условие;
        Возврат Запрос.Выполнить().Выбрать();
    КонецЕсли;
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура ПровестиДокументы() Экспорт
    ТаблицаДокументов.Сортировать("Дата");

    Для Каждого ТД Из ТаблицаДокументов Цикл
        Объект = ТД.Объект;

        КодОбработчика = Десериализатор.ПолучитьКодПостОбработчика(ТД.ЭлЭлемент);
        Если СокрЛП(КодОбработчика) <> "" Тогда
            ПостОбработчикОбъекта(Объект, КодОбработчика);
        КонецЕсли;

        БылПроведен = Объект.Проведен;
        Объект.ОбменДанными.Загрузка = Истина;
        Объект.Записать();

        Объект.ОбменДанными.Загрузка = Ложь;
        ИсточникПроведен = ПолучитьРеквизитБулево(ТД.ЭлЭлемент, "Проведен");
        Объект.Записать(
            ?(ИсточникПроведен,
                    РежимЗаписиДокумента.Проведение,
                    ?(БылПроведен,
                            РежимЗаписиДокумента.ОтменаПроведения,
                            РежимЗаписиДокумента.Запись)),
            РежимПроведенияДокумента.Неоперативный);
    КонецЦикла;

    ТаблицаДокументов.Очистить();
КонецПроцедуры

Процедура ДесериализоватьИзмененные(ЭлКонтекст) Экспорт
    ИтСущности = ИтераторСущности(ЭлКонтекст);
    Пока ИтераторСледующий(ИтСущности) Цикл
        ТипСущности = ОсобыеСущности.ТипСущности(ИтСущности.Элемент.ИмяСущности);
        ИтЭлементы = ИтераторЭлементыИзмененные(ИтСущности.Элемент);
        Пока ИтераторСледующий(ИтЭлементы) Цикл
            Попытка
                Десериализовать(ИтЭлементы.Элемент, ТипСущности.Тип, ТипСущности.Вид, Ложь, Истина);
            Исключение
                Искл = ИнформацияОбОшибке();
                Если Искл.Описание <> ExceptionIgnoreUpdate Тогда
                    ВызватьИсключение;
                КонецЕсли;
            КонецПопытки;
        КонецЦикла;
    КонецЦикла;

    ИтСостояния = ИтераторСостояния(ЭлКонтекст);
    Пока ИтераторСледующий(ИтСостояния) Цикл
        ТипСущности = ОсобыеСущности.ТипСущности(ИтСостояния.Элемент.ИмяСостояния);
        Если ТипСущности.Тип = "РегистрыСведений" Тогда
            ДесериализоватьРегистрСведений(ИтСостояния.Элемент, ТипСущности.Вид);
        КонецЕсли;
    КонецЦикла;

    ПровестиДокументы();
КонецПроцедуры

Процедура ДесериализоватьРегистрСведений(ЭлРегистр, Вид)
    Мета = Метаданные.РегистрыСведений[Вид];
    Менеджер = РегистрыСведений[Вид];

    Если Мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
        ИтСтроки = ИтераторСтроки(ЭлРегистр);
        Пока ИтераторСледующий(ИтСтроки) Цикл
            ЭлСтрока = ИтСтроки.Элемент;

            Запись = Менеджер.СоздатьМенеджерЗаписи();
            
            Если Не ЭлСтрока.Удален Тогда
                ИтРеквизиты = ИтераторРеквизиты(ЭлСтрока);
                Пока ИтераторСледующий(ИтРеквизиты) Цикл
                    ЭлРеквизит   = ИтРеквизиты.Элемент;
                    ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

                    МетаРек = Мета.Измерения.Найти(ИмяРеквизита);
                    Если МетаРек <> Неопределено Тогда
                        ОбновитьРеквизит(МетаРек.Тип, ЭлРеквизит, Запись, Ложь, Ложь);
                    Иначе
                        МетаРек =  Мета.Ресурсы.Найти(ИмяРеквизита);
                        Если МетаРек <> Неопределено Тогда
                            ОбновитьРеквизит(МетаРек.Тип, ЭлРеквизит, Запись, Ложь, Ложь);
                        КонецЕсли;
                    КонецЕсли;
                КонецЦикла;
                Запись.Записать(Истина);

            Иначе
                ИтРеквизиты = ИтераторРеквизиты(ЭлСтрока);
                Пока ИтераторСледующий(ИтРеквизиты) Цикл
                    ЭлРеквизит   = ИтРеквизиты.Элемент;
                    ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

                    МетаРек = Мета.Измерения.Найти(ИмяРеквизита);
                    Если МетаРек <> Неопределено Тогда
                        ОбновитьРеквизит(МетаРек.Тип, ЭлРеквизит, Запись, Ложь, Ложь);
                    КонецЕсли;
                КонецЦикла;
                Запись.Прочитать();
                Если Запись.Выбран() Тогда
                    Запись.Удалить();
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры

Функция Десериализовать(ЭлЭлемент, Тип, Вид, Знач ReferenceFlag, Знач UpdateFlag) Экспорт
    ReferenceFlag = ReferenceFlag Или ЭлЭлемент.Флаг = "reference";
    UpdateFlag = UpdateFlag И ЭлЭлемент.Флаг = "update";

    Стр = Синхронизировать(ЭлЭлемент, Тип, Вид, ReferenceFlag, UpdateFlag);

    Объект = Стр.Ссылка.ПолучитьОбъект();
    Если Объект = Неопределено Тогда
        Если ReferenceFlag Тогда
            ВызватьИсключение "Не удалось найти элемент по ссылке!" + Символы.ПС + "Сущность: " + Тип + "." + "Вид, УИД: " + ЭлЭлемент.УидЭлемента;
        КонецЕсли;
        Если UpdateFlag Тогда
            ВызватьИсключение ExceptionIgnoreUpdate;
        КонецЕсли;

        Если Тип = "Справочники" Тогда
            ЭтоГруппа = ПолучитьРеквизитБулево(ЭлЭлемент, "ЭтоГруппа");
            Объект = ?(ЭтоГруппа, Справочники[Вид].СоздатьГруппу(), Справочники[Вид].СоздатьЭлемент());
            Объект.УстановитьСсылкуНового(Стр.Ссылка);
        ИначеЕсли Тип = "Документы" Тогда
            Объект = Документы[Вид].СоздатьДокумент();
            Объект.УстановитьСсылкуНового(Стр.Ссылка);
        ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
            ЭтоГруппа = ПолучитьРеквизитБулево(ЭлЭлемент, "ЭтоГруппа");
            Объект = ?(ЭтоГруппа, ПланыВидовХарактеристик[Вид].СоздатьГруппу(), ПланыВидовХарактеристик[Вид].СоздатьЭлемент());
            Объект.УстановитьСсылкуНового(Стр.Ссылка);
        КонецЕсли;
    ИначеЕсли ЭлЭлемент.Изменен И Не Стр.Обновлен Тогда
        Объект = Стр.Ссылка.ПолучитьОбъект();
    Иначе
        Объект = Неопределено;
    КонецЕсли;

    Если Объект <> Неопределено Тогда
        Стр.Обновлен = Истина;

        Попытка
            Выполнить("ОсобыеСущности.Обновить_" + Тип + "_" + Вид + "(ЭлЭлемент, Объект, ReferenceFlag)");
        Исключение
            Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
                ОбновитьОбъект(ЭлЭлемент, Тип, Вид, Объект, ReferenceFlag, UpdateFlag);
            КонецЕсли;
        КонецПопытки;

        Если Тип = "Документы" Тогда
            ТД = ТаблицаДокументов.Добавить();
            ТД.Дата      = Объект.Дата;
            ТД.Объект    = Объект;
            ТД.ЭлЭлемент = ЭлЭлемент;

        Иначе
        КодОбработчика = Десериализатор.ПолучитьКодПостОбработчика(ЭлЭлемент);
        Если СокрЛП(КодОбработчика) <> "" Тогда
            ПостОбработчикОбъекта(Объект, КодОбработчика);
        КонецЕсли;
            Объект.ОбменДанными.Загрузка = Истина;
            Объект.Записать();
        КонецЕсли;
    КонецЕсли;

    Стр.Десериализован = Истина;

    Возврат Стр.Ссылка;
КонецФункции

Процедура ПостОбработчикОбъекта(Объект, КодОбработчика)
    Выполнить(КодОбработчика);
КонецПроцедуры

Процедура ОбновитьОбъект(ЭлЭлемент, Тип, Вид, Объект, ReferenceFlag, UpdateFlag)
    Мета = Объект.Метаданные();
    ЭтоНовый = Объект.ЭтоНовый();

    ИтРеквизиты = ИтераторРеквизиты(ЭлЭлемент);
    Пока ИтераторСледующий(ИтРеквизиты) Цикл
        ЭлРеквизит  = ИтРеквизиты.Элемент;

        ТолькоНовый = (ЭлРеквизит.Флаг = "create");
        Если ТолькоНовый И Не ЭтоНовый Тогда
            Продолжить;
        КонецЕсли;

        ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

        МетаРек = Мета.Реквизиты.Найти(ИмяРеквизита);
        Если МетаРек <> Неопределено Тогда
            ОбновитьРеквизит(МетаРек.Тип, ЭлРеквизит, Объект, ReferenceFlag, UpdateFlag);

        ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
            Объект.ПометкаУдаления = ЗначениеБулево(ЭлРеквизит);

        ИначеЕсли Тип = "Справочники" Тогда
            Если ИмяРеквизита = "Код" Тогда
                Если Мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
                    Объект.Код = ЗначениеСтрока(ЭлРеквизит);
                Иначе
                    Объект.Код = ЗначениеЧисло(ЭлРеквизит);
                КонецЕсли;
            ИначеЕсли ИмяРеквизита = "Наименование" Тогда
                Объект.Наименование = ЗначениеСтрока(ЭлРеквизит);
            ИначеЕсли ИмяРеквизита = "Владелец" Тогда
                Объект.Владелец = Ссылка(ЗначениеСсылка(ЭлРеквизит), ReferenceFlag, UpdateFlag, Ложь);
            ИначеЕсли ИмяРеквизита = "Родитель" Тогда
                Объект.Родитель = Ссылка(ЗначениеСсылка(ЭлРеквизит), ReferenceFlag, UpdateFlag, Ложь);
            ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
                Если Не Объект.ЭтоГруппа И ЗначениеБулево(ЭлРеквизит) Тогда
                    ВызватьИсключение "Элемент справочника содержит реквизит [ЭтоГруппа], но создан как элемент!";
                КонецЕсли;
            Иначе
                Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!");
                //ВызватьИсключение "Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!";
            КонецЕсли;

        ИначеЕсли Тип = "Документы" Тогда
            Если ИмяРеквизита = "Номер" Тогда
                Если Мета.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
                    Объект.Номер = ЗначениеСтрока(ЭлРеквизит);
                Иначе
                    Объект.Номер = ЗначениеЧисло(ЭлРеквизит);
                КонецЕсли;
            ИначеЕсли ИмяРеквизита = "Дата" Тогда
                Объект.Дата = ЗначениеДата(ЭлРеквизит);
            ИначеЕсли ИмяРеквизита = "Проведен" Тогда
                // Обработка признака проведённости документа выполняется отдельно
            Иначе
                Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в документе <" + Вид + ">!");
                //ВызватьИсключение "Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!";
            КонецЕсли;

        ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
            Если ИмяРеквизита = "Код" Тогда
                Если Мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
                    Объект.Код = ЗначениеСтрока(ЭлРеквизит);
                Иначе
                    Объект.Код = ЗначениеЧисло(ЭлРеквизит);
                КонецЕсли;
            ИначеЕсли ИмяРеквизита = "Наименование" Тогда
                Объект.Наименование = ЗначениеСтрока(ЭлРеквизит);
            ИначеЕсли ИмяРеквизита = "Родитель" Тогда
                Объект.Родитель = Ссылка(ЗначениеСсылка(ЭлРеквизит), ReferenceFlag, UpdateFlag, Ложь);
            ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
                Если Не Объект.ЭтоГруппа И ЗначениеБулево(ЭлРеквизит) Тогда
                    ВызватьИсключение "Элемент плана видов характеристик содержит реквизит [ЭтоГруппа], но создан как элемент!";
                КонецЕсли;
            Иначе
                Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в плане видов характеристик <" + Вид + ">!");
                //ВызватьИсключение "Не найден реквизит [" + ИмяРеквизита + "] в справочнике <" + Вид + ">!";
            КонецЕсли;

        Иначе
            ВызватьИсключение СтрОшНеНайденАтрибут(ИмяРеквизита, Тип);
        КонецЕсли;
    КонецЦикла;

    ИтТабличныеЧасти = ИтераторТабличныеЧасти(ЭлЭлемент);
    Пока ИтераторСледующий(ИтТабличныеЧасти) Цикл
        ТолькоНовый = (ИтТабличныеЧасти.Элемент.Флаг = "create");
        Если ТолькоНовый И Не ЭтоНовый Тогда
            Продолжить;
        КонецЕсли;

        ИмяТабличнойЧасти = ИтТабличныеЧасти.Элемент.ИмяТабличнойЧасти;

        МетаТЧ = Мета.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
        Если МетаТЧ <> Неопределено Тогда
            ТЧ = Объект[ИмяТабличнойЧасти];
            ТЧ.Очистить();

            ИтСтроки = ИтераторСтроки(ИтТабличныеЧасти.Элемент);
            Пока ИтераторСледующий(ИтСтроки) Цикл
                СтрокаТЧ = ТЧ.Добавить();

                ИтРеквизиты = ИтераторРеквизиты(ИтСтроки.Элемент);
                Пока ИтераторСледующий(ИтРеквизиты) Цикл
                    ЭлРеквизит = ИтРеквизиты.Элемент;
                    ИмяРеквизита = ЭлРеквизит.ИмяРеквизита;

                    МетаРек = МетаТЧ.Реквизиты.Найти(ИмяРеквизита);
                    Если МетаРек <> Неопределено Тогда
                        ОбновитьРеквизит(МетаРек.Тип, ЭлРеквизит, СтрокаТЧ, ReferenceFlag, UpdateFlag);
                    Иначе
                        Сообщить("Не найден реквизит [" + ИмяРеквизита + "] в табличной части [" + ИмяТабличнойЧасти + "] <" + Вид + ">!");
                    КонецЕсли;
                КонецЦикла;
            КонецЦикла;
        Иначе
            Сообщить("Не найдена табличная чать [" + ИмяТабличнойЧасти + "] в <" + Вид + ">!");
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

Процедура ОбновитьРеквизит(МетарекТип, ЭлРеквизит, Объект, ReferenceFlag, UpdateFlag)
    ЭлСсылка = ЗначениеСсылка(ЭлРеквизит);
    Если ЭлСсылка <> Неопределено Тогда
        Объект[ЭлРеквизит.ИмяРеквизита] = Ссылка(ЭлСсылка, ReferenceFlag, UpdateFlag, Ложь);

    ИначеЕсли МетаРекТип.СодержитТип(Тип("Строка")) Тогда
        Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеСтрока(ЭлРеквизит);
    ИначеЕсли МетаРекТип.СодержитТип(Тип("Число")) Тогда
        Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеЧисло(ЭлРеквизит);
    ИначеЕсли МетаРекТип.СодержитТип(Тип("Булево")) Тогда
        Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеБулево(ЭлРеквизит);
    ИначеЕсли МетаРекТип.СодержитТип(Тип("Дата")) Тогда
        Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеДата(ЭлРеквизит);
    Иначе
        ПервыйТип = МетаРекТип.Типы()[0];
        Если Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
            Объект[ЭлРеквизит.ИмяРеквизита] = ЗначениеПеречисление(ЭлРеквизит);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

// Используется для определения значения атрибута в контексте синхронизации или поиска.
Функция ЗначениеАтрибута(Тип, Мета, ЭлФильтр, ReferenceFlag, UpdateFlag)
    Перем Значение;

    ИмяРеквизита = ЭлФильтр.ИмяРеквизита;
    МетаРек = Мета.Реквизиты.Найти(ИмяРеквизита);
    Если МетаРек <> Неопределено Тогда
        Если МетаРек.Тип.СодержитТип(Тип("Строка")) Тогда
            Значение = ЗначениеСтрока(ЭлФильтр);
        ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Число")) Тогда
            Значение = ЗначениеЧисло(ЭлФильтр);
        ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Булево")) Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        ИначеЕсли МетаРек.Тип.СодержитТип(Тип("Дата")) Тогда
            Значение = ЗначениеДата(ЭлФильтр);
        Иначе
            ПервыйТип = МетаРек.Тип.Типы()[0];
            Если Перечисления.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
                Значение = ЗначениеПеречисление(ЭлФильтр);
            ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
                Значение = Ссылка(ЗначениеСсылка(ЭлФильтр), ReferenceFlag, UpdateFlag, Истина);
            ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
                Значение = Ссылка(ЗначениеСсылка(ЭлФильтр), ReferenceFlag, UpdateFlag, Истина);
            ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ПервыйТип) Тогда
                Значение = Ссылка(ЗначениеСсылка(ЭлФильтр), ReferenceFlag, UpdateFlag, Истина);
            КонецЕсли;
        КонецЕсли;

    ИначеЕсли Тип = "Справочники" Тогда
        Если ИмяРеквизита = "Код" Тогда
            Если Мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
                Значение = ЗначениеСтрока(ЭлФильтр);
            Иначе
                Значение = ЗначениеЧисло(ЭлФильтр);
            КонецЕсли;
        ИначеЕсли ИмяРеквизита = "Наименование" Тогда
            Значение = ЗначениеСтрока(ЭлФильтр);
        ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        ИначеЕсли ИмяРеквизита = "Владелец" Тогда
            Значение = Ссылка(ЗначениеСсылка(ЭлФильтр), ReferenceFlag, UpdateFlag, Истина);
        ИначеЕсли ИмяРеквизита = "Родитель" Тогда
            Значение = Ссылка(ЗначениеСсылка(ЭлФильтр), ReferenceFlag, UpdateFlag, Истина);
        ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        Иначе
            ВызватьИсключение "Не найден реквизит для фильтрации [" + ИмяРеквизита + "] в справочнике <" + Мета.Имя + ">!";
        КонецЕсли;

    ИначеЕсли Тип = "Документы" Тогда
        Если ИмяРеквизита = "Номер" Тогда
            Если Мета.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка Тогда
                Значение = ЗначениеСтрока(ЭлФильтр);
            Иначе
                Значение = ЗначениеЧисло(ЭлФильтр);
            КонецЕсли;
        ИначеЕсли ИмяРеквизита = "Дата" Тогда
            Значение = ЗначениеСтрока(ЭлФильтр);
        ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        ИначеЕсли ИмяРеквизита = "Проведен" Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        Иначе
            ВызватьИсключение "Не найден реквизит для фильтрации [" + ИмяРеквизита + "] в документе <" + Мета.Имя + ">!";
        КонецЕсли;

    ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
        Если ИмяРеквизита = "Код" Тогда
            Если Мета.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
                Значение = ЗначениеСтрока(ЭлФильтр);
            Иначе
                Значение = ЗначениеЧисло(ЭлФильтр);
            КонецЕсли;
        ИначеЕсли ИмяРеквизита = "Наименование" Тогда
            Значение = ЗначениеСтрока(ЭлФильтр);
        ИначеЕсли ИмяРеквизита = "ПометкаУдаления" Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        ИначеЕсли ИмяРеквизита = "Родитель" Тогда
            Значение = Ссылка(ЗначениеСсылка(ЭлФильтр), ReferenceFlag, UpdateFlag, Истина);
        ИначеЕсли ИмяРеквизита = "ЭтоГруппа" Тогда
            Значение = ЗначениеБулево(ЭлФильтр);
        Иначе
            ВызватьИсключение "Не найден реквизит для фильтрации [" + ИмяРеквизита + "] в плане видов характеристик <" + Мета.Имя + ">!";
        КонецЕсли;

    Иначе
        ВызватьИсключение СтрОшНеНайденАтрибут(ИмяРеквизита, Тип);
    КонецЕсли;

    Возврат Значение;
КонецФункции

// Выполняет попытку найти существующий элемент БД.
// 1. Сначала предпринимается попытка вызвать специализированный метод для поиска по элементу.
// 2. Если специализированного метода нет, происходит стандартный поиск элемента.
//    Синтетические элементы ищутся по ключевым реквизитам, стандарнтые элементы по УИД.
// 3. Если в БД элемент не был найден, функция возвращает типизированную ссылку,
//    с назначенным ей УИД из сообщения.
Функция Синхронизировать(ЭлЭлемент, Тип, Вид, ReferenceFlag, UpdateFlag)
    Перем Результат, РезультатПолучен;

    Стр = НайтиВКэше(Тип + "." + Вид, ЭлЭлемент.УидЭлемента);

    Если Стр = Неопределено Тогда
        Стр = ДобавитьВКэш(Тип + "." + Вид, ЭлЭлемент.УидЭлемента);

        РезультатПолучен = Ложь;

        ИмяМетода = "НайтиСсылку_" + Тип + "_" + Вид;
        Если АнтикэшМетодов.Получить(ИмяМетода) = Неопределено Тогда
            Попытка
                Результат = Вычислить("ОсобыеСущности." + ИмяМетода + "(ЭлЭлемент)");
                РезультатПолучен = Истина;

            Исключение
                Если ОсобыеСущности.ОшибкаВызоваМетода(ИнформацияОбОшибке()) Тогда
                    АнтикэшМетодов.Вставить(ИмяМетода, Истина);
                Иначе
                    ВызватьИсключение;
                КонецЕсли;
            КонецПопытки;
        КонецЕсли;

        Если Не РезультатПолучен И ЭлЭлемент.Синт Тогда
            ИтРеквизиты = ИтераторРеквизитыИд(ЭлЭлемент);
            Если ИтРеквизиты.size = 0 Тогда
                ВызватьИсключение СтрОшНетАтрибутовСинхронизации();
            КонецЕсли;

            Мета = Метаданные[Тип][Вид];
            Запрос = Новый Запрос();
            Условие = "";

            Пока ИтераторСледующий(ИтРеквизиты) Цикл
                ЭлФильтр = ИтРеквизиты.Элемент;
                ИмяРеквизита = ЭлФильтр.ИмяРеквизита;

                Условие = ?(ЗначениеЗаполнено(Условие), Условие + " И ", Условие);
                Условие = Условие + ИмяРеквизита + " = &" + ИмяРеквизита;

                Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеАтрибута(Тип, Мета, ЭлФильтр, ReferenceFlag, UpdateFlag));
            КонецЦикла;

            Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ " + ИмяОбъектаДляЗапроса[Тип] + "." + Вид + " ГДЕ " + Условие;
            Выборка = Запрос.Выполнить().Выбрать();

            Если Выборка.Количество() = 1 Тогда
                Выборка.Следующий();
                Результат = Выборка.Ссылка;

            ИначеЕсли Выборка.Количество() > 1 Тогда
                ВызватьИсключение СтрОшБолееОдногоЭлементСинхронизации();
            КонецЕсли;
        КонецЕсли;

        Если Результат = Неопределено Тогда
            Если Тип = "Справочники" Тогда
                Результат =  Справочники[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
            ИначеЕсли Тип = "Документы" Тогда
                Результат = Документы[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
            ИначеЕсли Тип = "ПланыВидовХарактеристик" Тогда
                Результат = ПланыВидовХарактеристик[Вид].ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлЭлемент.УидЭлемента));
            Иначе
                ВызватьИсключение СтрОшПоискНеПоддерживается(Тип, Вид);
            КонецЕсли;
        КонецЕсли;

        Стр.Ссылка = Результат;
    КонецЕсли;
    
    Возврат Стр;
КонецФункции


Функция Ссылка(ЭлЗначениеСсылка, ReferenceFlag, UpdateFlag, Синхронизация) Экспорт
    Стр = НайтиВКэше(ЭлЗначениеСсылка.ТипСущности.ИмяСущности, ЭлЗначениеСсылка.УидЭлемента);

    Если Синхронизация Тогда
        Если Стр = Неопределено Тогда
            Возврат Синхронизировать(
                    Десериализатор.ПолучитьЭлементПоСсылке(ЭлЗначениеСсылка),
                    ЭлЗначениеСсылка.ТипСущности.Тип,
                    ЭлЗначениеСсылка.ТипСущности.Вид,
                    ReferenceFlag, UpdateFlag)
                            .Ссылка;

        ИначеЕсли Стр.Ссылка = Неопределено Тогда
            ВызватьИсключение СтрОшОбнаруженЦикл();
        КонецЕсли;
        
    ИначеЕсли Стр = Неопределено Или Не Стр.Десериализован Тогда
        Возврат Десериализовать(Десериализатор.ПолучитьЭлементПоСсылке(ЭлЗначениеСсылка), ЭлЗначениеСсылка.ТипСущности.Тип, ЭлЗначениеСсылка.ТипСущности.Вид, ReferenceFlag, UpdateFlag);
    КонецЕсли;

    Возврат Стр.Ссылка;
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура ИнициализироватьКэшЭлементов()
    КэшЭлементов = Новый ТаблицаЗначений;
    КэшЭлементов.Колонки.Добавить("ИмяСущности");
    КэшЭлементов.Колонки.Добавить("УидЭлемента");
    КэшЭлементов.Колонки.Добавить("Ссылка");
    КэшЭлементов.Колонки.Добавить("Десериализован", Новый ОписаниеТипов("Булево"));
    КэшЭлементов.Колонки.Добавить("Обновлен",       Новый ОписаниеТипов("Булево"));

    КэшЭлементов.Индексы.Добавить("ИмяСущности, УидЭлемента");
КонецПроцедуры

Функция НайтиВКэше(ИмяСущности, УидЭлемента)
    Стр = КэшЭлементов.НайтиСтроки(Новый Структура("ИмяСущности, УидЭлемента", ИмяСущности, УидЭлемента));
    Возврат ?(Стр.Количество() = 0, Неопределено, Стр[0]);
КонецФункции

Функция ДобавитьВКэш(ИмяСущности, УидЭлемента)
    Стр = КэшЭлементов.Добавить();
    Стр.ИмяСущности = ИмяСущности;
    Стр.УидЭлемента = УидЭлемента;
    Возврат Стр;
КонецФункции


Процедура ИнициализироватьТаблицуДокументов()
    ТаблицаДокументов = Новый ТаблицаЗначений;
    ТаблицаДокументов.Колонки.Добавить("Дата");
    ТаблицаДокументов.Колонки.Добавить("Объект");
    ТаблицаДокументов.Колонки.Добавить("ЭлЭлемент");
КонецПроцедуры


Функция ПолучитьСозданныеЭлементы() Экспорт
    СписокСозданных = Новый СписокЗначений;

    Массив = КэшЭлементов.НайтиСтроки(Новый Структура("Обновлен", Истина));
    Для Каждого Стр Из Массив Цикл
        СписокСозданных.Добавить(Стр.Ссылка);
    КонецЦикла;

    Возврат СписокСозданных;
КонецФункции

//---------------------------------------------------------------------------------------------

Процедура Инициализировать()
    ExceptionIgnoreUpdate = "Игнорирование нетранзитивной ссылки";

    ИмяОбъектаДляЗапроса = Новый Соответствие;
    ИмяОбъектаДляЗапроса.Вставить("Справочники",             "Справочник");
    ИмяОбъектаДляЗапроса.Вставить("Документы",               "Документ");
    ИмяОбъектаДляЗапроса.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");

    ОсобыеСущности = Обработки.e2ОсобыеСущности.Создать();
    ОсобыеСущности.УстановитьДесериализатор(ЭтотОбъект);

    РежимXML  = Ложь;
    РежимXDTO = Ложь;

    ИнициализироватьКэшЭлементов();
    ИнициализироватьТаблицуДокументов();
    АнтикэшМетодов = Новый Соответствие;
КонецПроцедуры

Функция ИнициализироватьXDTO() Экспорт
    Инициализировать();
    Десериализатор = Обработки.e2ДесериализаторXDTO.Создать().Инициализировать(ОсобыеСущности);

    РежимXDTO = Истина;
    Возврат ЭтотОбъект;
КонецФункции

Функция ИнициализироватьXML() Экспорт
    Инициализировать();
    Десериализатор = Обработки.e2ДесериализаторXML.Создать().Инициализировать(ОсобыеСущности);

    РежимXML = Истина;
    Возврат ЭтотОбъект;
КонецФункции

Процедура Закрыть() Экспорт
    Десериализатор = Неопределено;
    ОсобыеСущности = Неопределено;
КонецПроцедуры

РежимXML  = Ложь;
РежимXDTO = Ложь;
